<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>72. 编辑距离</title>
      <link href="/72-edit-distance.html"/>
      <url>/72-edit-distance.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给你两个单词<em>word1</em>和<em>word2</em>，请你计算出将 <em>word1</em> 转换成 <em>word2</em> 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><ol><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ol><p><strong>示例1：</strong></p><pre><code>输入：word1 = "horse", word2 = "ros"输出：3解释：horse -&gt; rorse (将 'h' 替换为 'r')rorse -&gt; rose (删除 'r')rose -&gt; ros (删除 'e')</code></pre><p><strong>示例2：</strong></p><pre><code>输入：word1 = "intention", word2 = "execution"输出：5解释：intention -&gt; inention (删除 't')inention -&gt; enention (将 'i' 替换为 'e')enention -&gt; exention (将 'n' 替换为 'x')exention -&gt; exection (将 'n' 替换为 'c')exection -&gt; execution (插入 'u')</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. <a href="https://leetcode-cn.com/problems/edit-distance/solution/bian-ji-ju-chi-by-leetcode-solution/">动态规划</a></h4><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-动态规划-1"><a href="#1-动态规划-1" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> word2<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m  <span class="token operator">=</span> len<span class="token punctuation">(</span>word1<span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>word2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建dp数组</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 为dp数组赋初值</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 动态规划</td><td align="center">148ms</td><td align="center">92.0%</td><td align="center">17MB</td><td align="center">27.36%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 困难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70. 爬楼梯</title>
      <link href="/70-climb-stairs.html"/>
      <url>/70-climb-stairs.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例1：</strong></p><pre><code>输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶</code></pre><p><strong>示例2：</strong></p><pre><code>输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1.  1 阶 + 1 阶 + 1 阶2.  1 阶 + 2 阶3.  2 阶 + 1 阶</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>这一题实际上就是一个斐波那契数列。</p><h4 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><p>这里呢，用动态规划来走一遍流程</p><p>首先列个表：</p><table><thead><tr><th align="center">台阶数</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center">方法数</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">5</td><td align="center">8</td><td align="center">13</td></tr></tbody></table><p>通过上边的表格可以发现，从3阶台阶开始，爬上n阶的方法数就等于<code>n-1</code>阶加上<code>n-2</code>阶的。</p><p>这里呢我们可以定义一个一维数组<code>dp</code>来保存n阶台阶所对应的m中方法，用<code>i</code>表示台阶数。然后可以得出状态转移方程：<br>$$<br>dp[i] = dp[i-1] + dp[i-2]<br>$$<br>接下来就应该考虑特殊情况了，</p><ul><li><code>i == 1</code>：<code>dp[i] = 1</code></li><li><code>i == 2</code>：<code>dp[i] = 2</code></li></ul><p>最后将<code>dp</code>数组中的最后一个元素返回即可。</p><p>接下来优化，在这道题中，我们是没有必要单独创建一个数组的，只需要定义两个变量<code>a</code>和<code>b</code>分别来保存<code>i-1</code>与<code>i-2</code>位置的值即可。</p><p>首先赋初值，<code>a, b = 0, 1</code>。然后在每次循环时将<code>b</code>的值重新赋值给<code>a</code>，<code>i-1</code>与<code>i-2</code>位置的值也就是<code>a+b</code>重新赋值给<code>b</code>，即<code>a, b = b, a+b</code>。这样我们便实现了<code>a、b</code>对应值的自动迭代。</p><p>最后将<code>b</code>的值返回即可。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b        <span class="token keyword">return</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center"></td><td align="center">12ms</td><td align="center">95.89%</td><td align="center">12.5MB</td><td align="center">33%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 简单 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>65. 有效数字</title>
      <link href="/65-significant-figures.html"/>
      <url>/65-significant-figures.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>验证给定的字符串是否可以解释为十进制数字。</p><p>例如：</p><p><code>"0"</code> =&gt; <code>true</code></p><p><code>" 0.1 "</code> =&gt; <code>true</code></p><p><code>"abc"</code> =&gt; <code>false</code></p><p><code>"1 a"</code> =&gt; <code>false</code></p><p><code>"2e10"</code> =&gt; <code>true</code></p><p><code> " -90e3   "</code> =&gt; <code>true</code></p><p><code>" 1e"</code> =&gt; <code>false</code></p><p><code>"e3"</code> =&gt; <code>false</code></p><p><code>" 6e-1"</code> =&gt; <code>true</code></p><p><code>" 99e2.5 "</code> =&gt; <code>false</code></p><p><code>"53.5e93"</code> =&gt; <code>true</code></p><p><code>" --6 "</code> =&gt; <code>false</code></p><p><code>"-+3"</code> =&gt; <code>false</code></p><p><code>"95a54e53"</code> =&gt; <code>false</code></p><p><strong>说明：</strong>我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：</p><ul><li>数字 0-9</li><li>指数 “e”</li><li>正/负号 “+”/“-“</li><li>小数点 “.”</li></ul><p>当然，在输入中，这些字符的上下文也很重要。</p><p><strong>更新于2015-02-10：</strong></p><p><code>C++</code>函数的形式已经更新了。如果你仍然看见你的函数接收 <code>const char *</code> 类型的参数，请点击重载按钮重置你的代码。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-正则"><a href="#1-正则" class="headerlink" title="1. 正则"></a>1. 正则</h4><p>作为有效的十进制数字，必然是以<code>+</code> 、<code>-</code>开头，<code>+</code>号在数为非负的时候是可以不写的，所以可以得出正则表达式第一部分：<code>^[+-]?</code></p><p>对于科学计数法，指数<code>e</code>是在小数点后边的，所以接下来就是小数点问题：</p><ul><li>例如：<code>.5</code>这个数，对应的正则表达式则是：<code>\.\d+</code></li><li>例如：<code>5.</code>这个数，对应的正则表达式则是：<code>\d+</code></li><li>例如：<code>4.5</code>这个数，对应正则表达式则是：<code>\d+\.\d+</code></li><li>例如：<code>5</code>这个数，是没有小数点的，对应正则表达式是：<code>\d+</code></li><li>所以，综合以上几种情况，第二部分的正则表达式为：<code>(\d+|\d+\.|\d+\.\d+|\.\d+)</code></li></ul><p>接下来便是科学计数法部分了，因为指数<code>e</code>不一定存在，所以正则表达式是：<code>(e[+-]?\d+)?</code>。</p><p>到这里就结束了，所以整体的正则表达式是：<code>^[+-]?(\d+|\d+\.|\d+\.\d+|\.\d+)(e[+-]?\d+)?$</code></p><h4 id="2-条件判断"><a href="#2-条件判断" class="headerlink" title="2. 条件判断"></a>2. 条件判断</h4><p>对于这道题，通过题目所提供的信息，我们可以对以下几个条件进行判断：</p><ul><li>首先就是<code>+</code>和<code>-</code>，这两个符号出现的位置有两个：<ul><li>数字开头</li><li>指数<code>e</code>的后边，紧接着<code>e</code>出现</li></ul></li><li>接下来就是小数点了，并且小数点一定是在指数<code>e</code>的前边的。所以<ul><li>当前值为小数点的时候，<code>e</code>必须还没有出现过</li><li>小数点只能出现一次</li></ul></li><li>接下来判断<code>e</code>，<ul><li><code>e</code>只能出现一次</li><li>并且<code>e</code>的出现之前必须存在数字</li><li><code>e</code>出现一次以后。也必须有数字存在</li></ul></li></ul><p>根据上边的条件限定，我们假设字符串长度为<code>n</code>（使用<code>strip()</code>去掉两侧空格以后），当前元素下标为<code>i</code>，接下来就该考虑在代码中的实现了。</p><p>对于<code>+</code>、<code>-</code>我们需要做的是对其位置进行判断：</p><ul><li>第一种情况就是<code>i == 0</code></li><li>第二种情况就是<code>i != 0 and s[i] == 'e'</code>，如果<code>s[i] != 'e'</code>，那么就可以返回<code>False</code></li></ul><p>接下来，小数点<code>.</code>，我们就需要对小数点和指数<code>e</code>的出现状态进行判断了。我们可以创建两个变量<code>dot</code>、<code>e</code>分别来保存它们的出现状态，初始值都设为<code>False</code>，表示还没有出现。出现以后，值改为<code>True</code>。</p><p>接下来就是<code>e</code>，这时候需要判断的是<code>e</code>的出现状态，以及<code>num_pre_e</code>就是在<code>e</code>之前是否有数字出现。以及<code>num_after_e</code>也就是在<code>e</code>之后是否有数字出现。并且在<code>s[i] == 'e'</code>的时候，需要将<code>num_after_e</code>的值重置为<code>False</code>。</p><p>接下来，在判断<code>s[i].isdigit() is True</code>的情况下，将<code>num_after_e</code>的值重置为<code>True</code>。并且，在<code>e is Flase</code>的条件下，<code>num_pre_e</code>的值才为<code>True</code>。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-正则-1"><a href="#1-正则-1" class="headerlink" title="1. 正则"></a>1. 正则</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'^[+-]?(\d+\.\d+|\d+\.|\.\d+|\d+)(e[+-]?\d+)?$'</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-条件判断-1"><a href="#2-条件判断-1" class="headerlink" title="2. 条件判断"></a>2. 条件判断</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 点、指数e、e后边的数字、e前边的数字</span>dot<span class="token punctuation">,</span> e<span class="token punctuation">,</span> num_after_e<span class="token punctuation">,</span> num_pre_e <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'e'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> dot <span class="token operator">or</span> e<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dot <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> e <span class="token operator">or</span> <span class="token operator">not</span> num_pre_e<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    e <span class="token operator">=</span> <span class="token boolean">True</span>                    num_after_e <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> e<span class="token punctuation">:</span>                    num_pre_e <span class="token operator">=</span> <span class="token boolean">True</span>                num_after_e <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> num_after_e <span class="token operator">and</span> num_pre_e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 正则</td><td align="center">48ms</td><td align="center">55.48%</td><td align="center">13.6MB</td><td align="center">5.03%</td></tr><tr><td align="center">2. 条件判断</td><td align="center">48ms</td><td align="center">55.48%</td><td align="center">13.5MB</td><td align="center">10.19%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 困难 </tag>
            
            <tag> 数字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64. 最小路径和</title>
      <link href="/64-minimum-path-sum.html"/>
      <url>/64-minimum-path-sum.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给定一个包含非负整数的 <em>m</em> x <em>n</em> 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><p><strong>示例:</strong></p><pre><code>输入:[  [1,3,1],  [1,5,1],  [4,2,1]]输出: 7解释: 因为路径 1→3→1→1→1 的总和最小。</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h3 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h3><p>这道题实际上与<code>62、63</code>题是一样的，思路也是一样的。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 动态规划</td><td align="center">60ms</td><td align="center">64.22%</td><td align="center">14.7MB</td><td align="center">47.30%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 中等 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63. 不同路径II</title>
      <link href="/63-different-path-ii.html"/>
      <url>/63-different-path-ii.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>一个机器人位于一个 <em>m x n</em> 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/62-leetcode/robot_maze.png" style="margin-left: 0" width="50%"><p>网格中的障碍物和空位置分别用<code>1</code>和<code>0</code>来表示。</p><p><strong>说明：</strong> <em>m</em> 和 <em>n</em> 的值均不超过 100。</p><p><strong>示例1：</strong></p><pre><code>输入:[&nbsp; [0,0,0],&nbsp; [0,1,0],&nbsp; [0,0,0]]输出: 2解释:3x3 网格的正中间有一个障碍物。从左上角到右下角一共有 2 条不同的路径：1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><p>这道题与<code>62题</code>解题思路一样。网格中，第一行、第一列所以网格路径数都为<code>1</code>；其余网格，到达此网格的路径数等于其左侧网格路径数与上方网格路径之和。</p><p>与62题不同的在此题中存在障碍问题。但是解决方式没变。我们可以在输入的原二维数组<code>dp</code>中进行操作，假设障碍所在位置为<code>i</code>行<code>j</code>列。我们在每个网格位置上填入到达该位置的路径数，如果该位置是障碍，则该位置的值为<code>0</code>。具体如下：</p><ul><li>首行、首列：当障碍出现在第一行、第一列，那么障碍后边的网格的路径将不再是<code>1</code>，而是<code>0</code>（包括障碍所在位置）。但是障碍之前的位置的值依然是<code>1</code>。</li><li>非首行首列：该位置的值等于左侧网格的值与上方网格的值之和。</li></ul><p>我们可以得到状态转移方程为：</p><ul><li>首行、首列<code>i == 0 or j == 0</code>的情况：<ul><li>当<code>i == 0</code>:<ul><li>下标小于<code>j</code>的位置，<code>dp[i][j] = 1</code></li><li>小标大于等于<code>j</code>的位置，<code>dp[i][j] = 0</code></li></ul></li><li>当<code>j == 0</code>:<ul><li>下标小于<code>i</code>的位置，<code>dp[i][j] = 1</code></li><li>下标大于等于<code>i</code>的位置，<code>dp[i][j] = 0</code></li></ul></li></ul></li><li>其余位置，<code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></li></ul><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-动态规划-1"><a href="#1-动态规划-1" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obstacleGrid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 行数</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 列数</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 首行、首列</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将障碍位置值重置为0</span>                    <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                            obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token comment" spellcheck="true"># 首列</span>                    <span class="token keyword">elif</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span>                    <span class="token comment" spellcheck="true"># 首行</span>                    <span class="token keyword">elif</span> j <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> obstacleGrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 动态规划</td><td align="center">36ms</td><td align="center">92.58%</td><td align="center">13.5MB</td><td align="center">11.45%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 中等 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62. 不同路径</title>
      <link href="/62-different-paths.html"/>
      <url>/62-different-paths.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>问总共有多少条不同的路径？</p><img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/62-leetcode/robot_maze.png" width="50%" style="margin-left:0"><p>例如，上图是一个 7 x 3 的网格。有多少可能的路径？</p><p><strong>示例1：</strong></p><pre><code>输入: m = 3, n = 2输出: 3解释:从左上角开始，总共有 3 条路径可以到达右下角。1. 向右 -&gt; 向右 -&gt; 向下2. 向右 -&gt; 向下 -&gt; 向右3. 向下 -&gt; 向右 -&gt; 向右</code></pre><p><strong>示例2：</strong></p><pre><code>输入: m = 7, n = 3输出: 28</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m,n &lt;= 100</code></li><li>题目数据保证答案小于等于<code>2 * 10 ^ 9</code></li></ul><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><p>我们可以创建一个二维数组<code>dp</code>，这样一来，在数组中的每一个元素实际上就代表了一个网格。然后我们可以将到达这个网格的所有路径数量保存到对应的数组位置中，数组中所有元素的初始值我们全部设为0。</p><p>首先列一张表，表中填充了到达每个位置的路径值，如下所示：</p><table><thead><tr><th align="center">1</th><th align="center">1</th><th align="center">1</th><th align="center">1</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">6</td><td align="center">10</td><td align="center">15</td></tr><tr><td align="center">1</td><td align="center">4</td><td align="center">10</td><td align="center">20</td><td align="center">35</td></tr><tr><td align="center">1</td><td align="center">5</td><td align="center">15</td><td align="center">35</td><td align="center">60</td></tr></tbody></table><p>从表中，可以看出，对于<code>nx1</code>、<code>1xm</code>、<code>1x1</code>的情况来说，对应的路径数量全部为1。再往后的每个位置上的值都等于其左侧与上边两个网格值的和。</p><p>然后，我们可以创建两个指针<code>i</code>和<code>j</code>，<code>i</code>表示行数，<code>j</code>表示列数。可以得出下列的状态转移方程：</p><p>（1）当<code>i == 0 or j == 0</code>，则<code>dp[i][j] = 1</code></p><p>（2）否则呢，则<code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-动态规划-1"><a href="#1-动态规划-1" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># n 代表行数，m 代表列数,实际上不影响结果</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token keyword">if</span> res <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、-表现"><a href="#四、-表现" class="headerlink" title="四、 表现"></a>四、 表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 动态规划</td><td align="center">36ms</td><td align="center">90.79%</td><td align="center">13.6MB</td><td align="center">5.60%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 中等 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>977. 有序数组的平方</title>
      <link href="/977-squaring-an-ordered-array.html"/>
      <url>/977-squaring-an-ordered-array.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给定一个按非递减顺序排序的整数数组 <code>A</code>，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。</p><p><strong>示例 1：</strong></p><pre><code>输入：[-4,-1,0,3,10]输出：[0,1,9,16,100]</code></pre><p><strong>示例2：</strong></p><pre><code>输入：[-7,-3,2,3,11]输出：[4,9,9,49,121]</code></pre><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 10000</code></li><li><code>-10000 &lt;= A[i] &lt;= 10000</code></li><li><code>A</code>已按非递减顺序排序。</li></ol><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-列表生成式"><a href="#1-列表生成式" class="headerlink" title="1. 列表生成式"></a>1. 列表生成式</h4><p>（1）本题可以直接使用列表生成式，对列表中每一个元素进行平方操作，然后对结果使用<code>sorted</code>进行排序即可。</p><p>（2）当然，也可以使用<code>map</code>函数，对列表中的每一个数进行操作。然后再排序。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-列表生成式-1"><a href="#1-列表生成式-1" class="headerlink" title="1. 列表生成式"></a>1. 列表生成式</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 列表生成式</td><td align="center">256ms</td><td align="center">89.50%</td><td align="center">15.5MB</td><td align="center">5.22%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 简单 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>53. 最大子序和</title>
      <link href="/53-maximum-suborder-sum.html"/>
      <url>/53-maximum-suborder-sum.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例:</strong></p><pre><code>输入: [-2,1,-3,4,-1,2,1,-5,4]输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</code></pre><p><strong>进阶:</strong></p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><p>我们假设<code>i</code>为和最大的子序列的结束位置，用 <strong>a<del>i</del></strong> 表示 nums[i]。然后我们可以用一个数组<code>dp</code>来保存这些结果，然后求<code>dp</code>数组中的最大值即可。即：<br>$$<br>max(dp)<br>$$<br>因此，我们需要求出数组<code>dp</code>中每一个位置。而<code>dp[i]</code>的值又与<code>dp[i-1]</code>有关，这取决于<strong>dp[i]**与</strong>dp[i-1] + a<del>i</del>**谁大谁小，最后我们取一个较大者。所以，可以得出状态转移方程：<br>$$<br>dp[i] = max(dp[i-1] + ai, ai)<br>$$<br>对于这道题呢，我们实际上就不需要新设一个数组了，直接将每次计算结果保存到<code>nums</code>中<code>i</code>对应位置即可。</p><p>在计算之前我们还需要进行一些条件限定：</p><ul><li>首先，<code>0 &lt;= i &lt;= len(nums)</code></li><li>其次，如果<code>nums</code>长度小于等于1，那么就不需要判断了，直接返回即可，所以我们可以直接从<code>1</code>开始。</li></ul><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-动态规划-1"><a href="#1-动态规划-1" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1.动态规划</td><td align="center">52ms</td><td align="center">57.45%</td><td align="center">14.4MB</td><td align="center">5.01%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 简单 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 分治算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>116. 填充每个节点的下一个右侧节点指针</title>
      <link href="/116-fill-the-next-right-node-pointer-of-each.html"/>
      <url>/116-fill-the-next-right-node-pointer-of-each.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、<a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">题目描述</a></h3><p>给定一个<strong>完美二叉树</strong>，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><pre><code>struct Node &amp;#123;  int val;  Node *left;  Node *right;  Node *next;&amp;#125;</code></pre><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p><p>初始状态下，所有 next 指针都被设置为 <code>NULL</code>。</p><p><strong>示例：</strong></p><img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/116-leetcode/116_sample.png" width="90%"><pre><code>输入：&amp;#123;"$id":"1","left":&amp;#123;"$id":"2","left":&amp;#123;"$id":"3","left":null,"next":null,"right":null,"val":4&amp;#125;,"next":null,"right":&amp;#123;"$id":"4","left":null,"next":null,"right":null,"val":5&amp;#125;,"val":2&amp;#125;,"next":null,"right":&amp;#123;"$id":"5","left":&amp;#123;"$id":"6","left":null,"next":null,"right":null,"val":6&amp;#125;,"next":null,"right":&amp;#123;"$id":"7","left":null,"next":null,"right":null,"val":7&amp;#125;,"val":3&amp;#125;,"val":1&amp;#125;输出：&amp;#123;"$id":"1","left":&amp;#123;"$id":"2","left":&amp;#123;"$id":"3","left":null,"next":&amp;#123;"$id":"4","left":null,"next":&amp;#123;"$id":"5","left":null,"next":&amp;#123;"$id":"6","left":null,"next":null,"right":null,"val":7&amp;#125;,"right":null,"val":6&amp;#125;,"right":null,"val":5&amp;#125;,"right":null,"val":4&amp;#125;,"next":&amp;#123;"$id":"7","left":&amp;#123;"$ref":"5"&amp;#125;,"next":null,"right":&amp;#123;"$ref":"6"&amp;#125;,"val":3&amp;#125;,"right":&amp;#123;"$ref":"4"&amp;#125;,"val":2&amp;#125;,"next":null,"right":&amp;#123;"$ref":"7"&amp;#125;,"val":1&amp;#125;解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。</code></pre><p><strong>提示：</strong></p><ul><li>你只能使用常量级额外空间。</li><li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li></ul><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-层次遍历"><a href="#1-层次遍历" class="headerlink" title="1. 层次遍历"></a>1. 层次遍历</h4><p>根据题意可以知道，这道题就是在二叉树中每一层的各个节点间创建一个从左向右指向的链表。所以可以使用层次遍历的方式，一层一层的遍历。</p><p>创建两个栈<code>stack</code>和<code>new_stack</code>，<code>stack</code>用来保存当前层的节点，<code>new_stack</code>用来保存下一层的节点。</p><p>首先对<code>stack</code>中的节点进行链接，同时获取下一层的节点并保存到<code>new_stack</code>中。当当当前层节点链接完以后，然后再将<code>new_stack</code> 重新赋值给<code>stack</code>。</p><p>最后返回<code>root</code>。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-层次遍历-1"><a href="#1-层次遍历-1" class="headerlink" title="1. 层次遍历"></a>1. 层次遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""# Definition for a Node.class Node:    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):        self.val = val        self.left = left        self.right = right        self.next = next"""</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">connect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'Node'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 层次遍历</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>         stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            new_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    node<span class="token punctuation">.</span>next <span class="token operator">=</span> None                <span class="token keyword">else</span><span class="token punctuation">:</span>                    node<span class="token punctuation">.</span>next <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    new_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    new_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            stack <span class="token operator">=</span> new_stack        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 层次遍历</td><td align="center">84ms</td><td align="center">54.58%</td><td align="center">15.2MB</td><td align="center">5.31%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 中等 </tag>
            
            <tag> 树 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32. 最长有效括号</title>
      <link href="/32-longest-valid-parenthesis.html"/>
      <url>/32-longest-valid-parenthesis.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给定一个只包含<code> '('</code> 和 <code>')'</code> 的字符串，找出最长的包含有效括号的子串的长度。</p><p><strong>示例 1:</strong></p><pre><code>输入: "(()"输出: 2解释: 最长有效括号子串为 "()"</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: ")()())"输出: 4解释: 最长有效括号子串为 "()()"</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h4><p>创建一个空栈<code>stack</code>，同时创建一个标志数组<code>flag</code>，数组长度等于字符串<code>s</code>长度，初始值全部为0（0代表非有效括号，1代表有效括号一部分）。</p><p>对字符串<code>s</code>进行遍历，当遍历到的字符是<code>(</code>，则将其下标添加到栈<code>stack</code>中。如果是<code>)</code>，并且栈不为空，则将栈顶下标抛出，同时将栈顶下标与当前遍历的下标在<code>flag</code>中的对应位置的值改为<code>1</code>。</p><p>当字符串<code>s</code>遍历结束，然后对标志数组<code>flag</code>进行遍历。统计数组中连续为<code>1</code>的长度，然后与<code>max_length</code>（有效括号最大长度）对比，将比较大的值赋值给<code>max_length</code>。</p><p>最后返回<code>max_length</code>。</p><h4 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2. 动态规划"></a>2. 动态规划</h4><p>我们首先定义一个数组<code>dp</code>，用来统计最长有效括号的长度，数组长度与字符串<code>s</code>的长度相等，并且将值全部初始化为0。用<code>dp[i]</code>表示以下标为<code>i</code>的元素为结尾的最长有效括号的长度。</p><p>我们还知道有效括号必须以<code>)</code>结尾，所以我们只需要计算<code>)</code>在<code>dp</code>数组中对应位置上的值即可。</p><p>我们从前往后遍历字符串<code>s</code>，遇到<code>)</code>边进行统计，由于要形成有效括号，字符串<code>s</code>长度至少为2，所以代码中直接从第二个元素也就是下标为<code>1</code>的位置开始遍历：</p><p>如果<code>s[i] == ")"</code>：</p><ul><li><p>情况一：如果<code>s[i-1] == "("</code>，这时<code>s[i]</code>与<code>s[i-1]</code>正好是一对有效括号，所以<br>$$<br>dp[i] == dp[i-2] + 2<br>$$</p></li><li><p>如果<code>s[i-1] == ")"</code>，这时我们就需要判断<code>s[i - dp[i-1] - 1] == "("</code>，如果成立，那么<br>$$<br>dp[i] = dp[i-1] + dp[i - dp[i-1] - 2] + 2<br>$$</p></li></ul><p>到此为止，已经得到状态转移方程，接下来需要进行一些条件限定：</p><ul><li>在第一种情况中，需要确保<code>i-2 &gt;= 0</code></li><li>在第二种情况中，要保证<code>i - dp[i-1] - 1 &gt;= 0</code></li></ul><p>最后返回数组<code>dp</code>中的最大值。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-栈-1"><a href="#1-栈-1" class="headerlink" title="1. 栈"></a>1. 栈</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 栈</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 标志数组，保存有效括号的位置</span>        flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 有效括号的最大长度</span>        max_length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 当前有效括号的长度</span>        cur <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">and</span> stack<span class="token punctuation">:</span>                index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                cur <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># 保证当前元素不是最后一个</span>                <span class="token keyword">if</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 下一个标志位置为0，则进行长度比较、更新</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> flag<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        max_length <span class="token operator">=</span> max<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> max_length<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    max_length <span class="token operator">=</span> max<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> max_length<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> max_length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-动态规划-1"><a href="#2-动态规划-1" class="headerlink" title="2. 动态规划"></a>2. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建一个dp数组</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token number">-2</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>                <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>dp <span class="token keyword">if</span> dp <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 栈</td><td align="center">56ms</td><td align="center">71.14%</td><td align="center">14.1MB</td><td align="center">5.02%</td></tr><tr><td align="center">2. 动态规划</td><td align="center">56ms</td><td align="center">71.36%</td><td align="center">13.9MB</td><td align="center">41.84%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 困难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 中最大整数值和浮点数值</title>
      <link href="/the-largest-integer-value-and-floating-point-in-python3.html"/>
      <url>/the-largest-integer-value-and-floating-point-in-python3.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>在LeetCode刷题的时候，在解一道题的时候遇到了这个问题，然后就查了一下，下边记录一下。</p><h3 id="二、记录"><a href="#二、记录" class="headerlink" title="二、记录"></a>二、记录</h3><h4 id="1-最大整数值"><a href="#1-最大整数值" class="headerlink" title="1. 最大整数值"></a>1. 最大整数值</h4><p>直接上代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxsize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在我的电脑中运行结果如下：</p><blockquote><p>2147483647</p></blockquote><h4 id="2-最大浮点数值"><a href="#2-最大浮点数值" class="headerlink" title="2. 最大浮点数值"></a>2. 最大浮点数值</h4><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果如下：</p><blockquote><p>inf</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1002. 查找常用字符</title>
      <link href="/1002-find-common-characters.html"/>
      <url>/1002-find-common-characters.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><p>给定仅有小写字母组成的字符串数组<code> A</code>，返回列表中的每个字符串中都显示的全部字符（<strong>包括重复字符</strong>）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><pre><code>输入：["bella","label","roller"]输出：["e","l","l"]</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：["cool","lock","cook"]输出：["c","o"]</code></pre><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 100</code></li><li><code>1 &lt;= A[i].length &lt;= 100</code></li><li><code>A[i][j] </code>是小写字母</li></ol><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-暴力法"><a href="#1-暴力法" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h4><p>这道题实际上就是统计列表<code>A</code>中所有字符串元素的共有部分。</p><p>所以下边就任选一个字符串元素作为基础（这里选择一个长度最短的字符串最合适），下边选择的是最后一个元素。统计这个字符串中所有字母出现的次数，以字母为键，次数为值，保存在一个字典<code>d</code>中。</p><p>然后对<code>d</code>中的键进行遍历，每遍历一个键<code>key</code>，然后就对列表<code>A</code>中的每一个剩余字符串中所有字母进行判断，如果键<code>key</code>在遍历到的这个字符串中存在，那么则对<code>key</code>在字符串中出现的次数与<code>key</code>对应的值进行比较，保留最小的那个，并重新赋值给<code>key</code>；不存在，则抛弃键<code>key</code>，开始对下一个键进行判断。</p><p>如此一来，我们便完成了字母的过滤以及统计。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-暴力法-1"><a href="#1-暴力法-1" class="headerlink" title="1. 暴力法"></a>1. 暴力法</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">commonChars</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> dict<span class="token punctuation">(</span>Counter<span class="token punctuation">(</span>A<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 保存d中不合适的字母</span>        not_in <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> s <span class="token keyword">in</span> A<span class="token punctuation">:</span>                cur <span class="token operator">=</span> Counter<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token keyword">if</span> cur<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>                    d<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">if</span> d<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> cur<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">else</span> cur<span class="token punctuation">[</span>key<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    not_in<span class="token punctuation">.</span>add<span class="token punctuation">(</span>key<span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> count <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> key <span class="token operator">not</span> <span class="token keyword">in</span> not_in<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">*</span>count<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 暴力法</td><td align="center">144ms</td><td align="center">5.11%</td><td align="center">13.5MB</td><td align="center">6.58%</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. 整数转罗马数字</title>
      <link href="/12-integer-to-roman-numeral.html"/>
      <url>/12-integer-to-roman-numeral.html</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>530. 二叉搜索树的最小绝对值</title>
      <link href="/530-minimum-absolute-value-of-binary-search-tree.html"/>
      <url>/530-minimum-absolute-value-of-binary-search-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给你一棵所有节点为<code>非负值</code>的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p><strong>示例：</strong></p><pre><code>输入：   1    \     3    /   2输出：1解释：最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。</code></pre><p><strong>提示：</strong></p><ul><li>树中至少有2个节点</li><li>本题与 783 <a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/</a> 相同</li></ul><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>依然先放上<a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/solution/er-cha-sou-suo-shu-de-zui-xiao-jue-dui-chai-by-lee/">LeetCode官方题解</a></p><h4 id="1-中序遍历"><a href="#1-中序遍历" class="headerlink" title="1. 中序遍历"></a>1. 中序遍历</h4><p>对搜索二叉树进行中序遍历，得到的结果是升序的，所以计算任意两个节点的差的绝对值的最小值，那么这两个节点在遍历结果中一定是挨着的。所以只需要计算比较遍历结果中所有相邻节点的值的差的最小值就好。对于遍历结果我们可以保存到一个数组中，然后开始计算。但是，在这里，直接在中序遍历过程中进行计算。</p><p>所以可以先创建一个变量<code>pre</code>来保存前一个节点的值，因为在遍历到第一个节点的时候，前边还没有节点，所以需要为<code>pre</code>赋初值。此题中二叉搜索树的节点都为非负值，所以可以为<code>pre</code>赋一个负值，下边代码中选择的是<code>-1</code>。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-中序遍历-1"><a href="#1-中序遍历-1" class="headerlink" title="1. 中序遍历"></a>1. 中序遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize    <span class="token comment" spellcheck="true"># 为res赋一个系统最大值</span>        pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> root <span class="token operator">or</span> queue<span class="token punctuation">:</span>            <span class="token keyword">while</span> root<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            root <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> pre <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> min<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token operator">-</span>pre<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>            pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 中序遍历</td><td align="center">72ms</td><td align="center">56.00%</td><td align="center">15.5MB</td><td align="center">33.47%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9. 回文数</title>
      <link href="/9-number-of-palindrome.html"/>
      <url>/9-number-of-palindrome.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例1：</strong></p><pre><code>输入: 121输出: true</code></pre><p><strong>示例2：</strong></p><pre><code>输入: -121输出: false解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</code></pre><p><strong>示例3：</strong></p><pre><code>输入: 10输出: false解释: 从右向左读, 为 01 。因此它不是一个回文数。</code></pre><p><strong>进阶：</strong></p><p>你能不将整数转为字符串来解决这个问题吗？</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-转为字符串"><a href="#1-转为字符串" class="headerlink" title="1. 转为字符串"></a>1. 转为字符串</h4><p>将整数转变为字符串。</p><h4 id="2-反转一半数字"><a href="#2-反转一半数字" class="headerlink" title="2. 反转一半数字"></a>2. <a href="https://leetcode-cn.com/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/">反转一半数字</a></h4><p>因为回文数是以中间位置为轴对称的，所以我们可以将后一半的数字反转，然后与前一部分进行比较。相等为<code>True</code>，不等为<code>False</code>。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><h4 id="1-转为字符串-1"><a href="#1-转为字符串-1" class="headerlink" title="1. 转为字符串"></a>1. 转为字符串</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        s <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-反转一半数字-1"><a href="#2-反转一半数字-1" class="headerlink" title="2. 反转一半数字"></a>2. 反转一半数字</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 当数字小于0，为False；当数字不等于但是结尾是0，结果为False</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> res <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span>            x <span class="token operator">//=</span> <span class="token number">10</span>        <span class="token comment" spellcheck="true"># 当x偶数位，反转数字res与剩余数字x是相等的</span>        <span class="token comment" spellcheck="true"># 当x为奇数位，反转数字res比剩余数字x多一位，这一位数字便是原数字x中间那一位数</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> x <span class="token operator">or</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> res <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 转为字符串</td><td align="center">60ms</td><td align="center">99.48%</td><td align="center">13.5MB</td><td align="center">8.31%</td></tr><tr><td align="center">2. 反转一半数字</td><td align="center">88ms</td><td align="center">59.23%</td><td align="center">13.3MB</td><td align="center">80.80%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11. 盛最多水的容器</title>
      <link href="/11-container-with-the-most-water.html"/>
      <url>/11-container-with-the-most-water.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给你 n 个<strong>非负整数</strong> a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明：</strong>你不能倾斜容器，且<em>n</em>的值至少为2。</p><img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/11-leetcode/question_11.jpg" width="70%"><p>图中垂直线代表输入数组[1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。</p><p><strong>示例：</strong></p><pre><code>输入：[1,8,6,2,5,4,8,3,7]输出：49</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>详见 <a href="https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/">LeetCode官方题解</a></p><h4 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><p>这道题归根结底就是求面积。两个元素下标之差为长，两元素之中小的那个为宽。在数组中找出这样两个元素，满足面积最大化。</p><p>采用双指针写法，创建两个指针<code>left</code>和<code>right</code>。分别从数组头部和尾部开始移动，对<code>left</code>和<code>right</code>指向的元素进行比较，如果<code>left</code>只想的元素小于<code>right</code>指向的元素，则<code>left += 1</code>,反之则<code>right -= 1</code>，意思就是谁小谁动。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双指针-1"><a href="#1-双指针-1" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span>                right <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 双指针</td><td align="center">76ms</td><td align="center">48.11%</td><td align="center">14.8MB</td><td align="center">26.71%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. 字符串转换整数（atoi）</title>
      <link href="/8-string-conversion-integer-atoi.html"/>
      <url>/8-string-conversion-integer-atoi.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><ul><li><p>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</p></li><li><p>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</p></li><li><p>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</p></li></ul><p><strong>注意</strong>：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><p><strong>提示：</strong></p><ul><li><p>本题中的空白字符只包括空格字符 ‘ ‘ 。</p></li><li><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p></li></ul><p><strong>示例1：</strong></p><pre><code>输入："42"输出： 42</code></pre><p><strong>示例2：</strong></p><pre><code>输入: "   -42"输出: -42解释: 第一个非空白字符为 '-', 它是一个负号。&nbsp;    我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><p><strong>示例3：</strong></p><pre><code>输入: "4193 with words"输出: 4193解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。</code></pre><p><strong>示例4：</strong></p><pre><code>输入: "words and 987"输出: 0解释: 第一个非空字符是 'w', 但它不是数字或正、负号。     因此无法执行有效的转换。</code></pre><p><strong>示例5：</strong></p><pre><code>输入: "-91283472332"输出: -2147483648解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 &nbsp;    因此返回 INT_MIN (−231) 。</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-遍历"><a href="#1-遍历" class="headerlink" title="1. 遍历"></a>1. 遍历</h4><ul><li>从头开始遍历，如果元素为空格<code>" "</code>，则跳过去，继续遍历下一个元素。</li><li>如果遍历到的元素不为空格，则判断是否为加号<code>+</code>、减号<code>-</code>或者数字，不过不是则退出，如果是数字则保存。然后判断下一个元素是否为数字，如果为<code>true</code>，则继续下一步循环，否则退出。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-遍历-1"><a href="#1-遍历-1" class="headerlink" title="1. 遍历"></a>1. 遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">""</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">" "</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-"</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"+"</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true"># 下一位元素如果是数字就继续循环，否则就退出</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> length <span class="token operator">and</span> <span class="token operator">not</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-"</span> <span class="token operator">or</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res <span class="token operator">=</span> int<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">elif</span> res <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span>        <span class="token keyword">return</span> res <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 遍历</td><td align="center">48ms</td><td align="center">59.54%</td><td align="center">13.3MB</td><td align="center">56.84%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 中等 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. 整数反转</title>
      <link href="/7-integer-inversion.html"/>
      <url>/7-integer-inversion.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><strong>示例1：</strong></p><pre><code>输入: 123输出: 321</code></pre><p><strong>示例2：</strong></p><pre><code>输入: -123输出: -321</code></pre><p><strong>示例3：</strong></p><pre><code>输入: 120输出: 21</code></pre><p><strong>注意：</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-转变为字符串"><a href="#1-转变为字符串" class="headerlink" title="1. 转变为字符串"></a>1. 转变为字符串</h4><p>将 整数<code>x</code>转化为字符串，然后将字符串反转<code>x = x[::-1]</code>。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 判断是否超出数值范围</span>        <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sx <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            res <span class="token operator">=</span> sx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> <span class="token string">'-'</span> <span class="token operator">+</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> int<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span> <span class="token operator">&lt;=</span> int<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">转化为字符串</td><td align="center">32ms</td><td align="center">99.02%</td><td align="center">13.2MB</td><td align="center">94.61%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>142. 环形链表II</title>
      <link href="/142-circular-linked-list-ii.html"/>
      <url>/142-circular-linked-list-ii.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>示例1：</strong></p><pre><code>输入：head = [3,2,0,-4], pos = 1输出：tail connects to node index 1解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><div align="left">    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist.png" width="40%"></div><p><strong>示例2：</strong></p><pre><code>输入：head = [1,2], pos = 0输出：tail connects to node index 0解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><div align="left">    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist_test2.png" width="25%"></div><p><strong>示例3：</strong></p><pre><code>输入：head = [1], pos = -1输出：no cycle解释：链表中没有环。</code></pre><div>    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist_test3.png" width="10%"></div><p><strong>进阶：</strong></p><p>你是否可以不用额外空间解决此题？</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-快慢指针leetcode官网题解"><a href="#1-快慢指针leetcode官网题解" class="headerlink" title="1. 快慢指针leetcode官网题解"></a>1. 快慢指针<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/">leetcode官网题解</a></h4><p>使用两个指针，<code>p1</code>和<code>p2</code>。它们都起始于链表头部，当<code>p1</code>指针每次向后移动一个位置，<code>p2</code>指针则向后移动两个位置。如果链表中存在环，那么<code>p1</code>、<code>p2</code>肯定会在环中相遇。</p><p>如下图所示，假设链表中存在环，且环外部分的链表长度为<code>a</code>，<code>b+c</code>为整个环的长度。假设<code>p1</code>指针在环内走了距离<code>b</code>，然后与<code>p2</code>指针相遇，这时<code>p2</code>指针已经在环内走了<code>n</code>圈因此可以得出<code>p2</code>走过的距离公式：<code>a + n(b+c) + b</code>。</p><img src="https://gitee.com/arvin-he/blog-img/raw/master/post-img/141-circular_linked_list/142_fig1.png" width="70%"><p>因为<code>p2</code>指针每次走的距离都是<code>p1</code>指针走过距离的2倍，所以<code>p2</code>走过的总距离也是<code>p1</code>的2倍。因此：<code>a + n(b+c) + b = 2(a+b)</code> ==&gt;  <code>a = (n-1)b + nc</code>。</p><p>上边的等式又可以变化成<code>a = (n-1)(b+c) + c</code>，从这个等式我们可以发现，从相遇点到入环点的距离再加上<code>n-1</code>圈的环长，正好等于链表从头部到入环点的距离<code>a</code>。</p><p>所有在指针<code>p1</code>和<code>p2</code>相遇的的时候，我们可以创建一个新的指针<code>p3</code>，并将其指向链表的头。然后让<code>p3</code>和<code>p1</code>同时向后每次移动一个位置，最后，它们将会在入环点相遇。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-快慢指针"><a href="#1-快慢指针" class="headerlink" title="1. 快慢指针"></a>1. 快慢指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        p1 <span class="token operator">=</span> head        p2 <span class="token operator">=</span> head        <span class="token keyword">while</span> p2 <span class="token operator">and</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next            <span class="token keyword">if</span> p1 <span class="token operator">==</span> p2<span class="token punctuation">:</span>                p3 <span class="token operator">=</span> head                <span class="token keyword">while</span> p3 <span class="token operator">!=</span> p1<span class="token punctuation">:</span>                    p3 <span class="token operator">=</span> p3<span class="token punctuation">.</span>next                    p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next                <span class="token keyword">return</span> p1        <span class="token keyword">return</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 快慢指针</td><td align="center">56ms</td><td align="center">94.70%</td><td align="center">16.1MB</td><td align="center">95.81%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown小记</title>
      <link href="/markdown-notes.html"/>
      <url>/markdown-notes.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、图片操作"><a href="#一、图片操作" class="headerlink" title="一、图片操作"></a>一、图片操作</h3><h4 id="1-调整插入的图片的位置"><a href="#1-调整插入的图片的位置" class="headerlink" title="1. 调整插入的图片的位置"></a>1. 调整插入的图片的位置</h4><p>在Markdown语法中，插入图片默认位置是居中的，可是有时候还是需要居左或者居右一下滴，既然遇到了就记一下吧。</p><h5 id="先记录一下下面页面中图片依然全部居中的问题"><a href="#先记录一下下面页面中图片依然全部居中的问题" class="headerlink" title="先记录一下下面页面中图片依然全部居中的问题"></a>先记录一下下面页面中图片依然全部居中的问题</h5><p><strong>问题：在Typora中写好都显示没问题，提交上来以后都居中了</strong></p><p><strong>原因：hexo 的Metary主题在进行渲染的时候，对图片进行了居中操作。</strong></p><p>下边的方法没问题。</p><h5 id="（1）方法一"><a href="#（1）方法一" class="headerlink" title="（1）方法一"></a>（1）方法一</h5><p>在<code>img</code>标签中插入<code>div</code>标签中</p><ul><li><code>&lt;div align=left&gt;</code>(居左)</li><li><code>&lt;div align=right&gt;</code>(居右)</li><li><code>&lt;div align=center&gt;</code>(居中)</li></ul><p>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span>left</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>50%</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果：</p><div align="left">    <img src="https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg" width="50%"></div>    <h5 id="（2）方法二"><a href="#（2）方法二" class="headerlink" title="（2）方法二"></a>（2）方法二</h5><p>在<code>img</code>标签中插入<code>style</code>属性，例如：<code>style="margin-left:45px"</code>。以右侧为基准可以插入<code>style=“margin-right:45px”</code>。</p><p>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>50%</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">45</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果：</p><img src="https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg" width="50%" style="margin-left: 45px"><h4 id="2-调整图片大小"><a href="#2-调整图片大小" class="headerlink" title="2. 调整图片大小"></a>2. 调整图片大小</h4><p>在<code>img</code>标签中插入<code>width</code>和<code>height</code>属性</p><p>例1：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>30%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg" width="30%"></p><p>例2：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>100px</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>100px</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://gitee.com/arvin-he/blog-img/raw/master/tag-img/wallpaper36.jpg" width="100px" height="100px"></p><p><strong>总结：</strong></p><ul><li>可以使用<code>%</code>百分比的形式，也可以使用像素单位<code>px</code></li><li>使用百分比的形式时，只需要写<code>width</code>属性即可</li><li>使用<code>px</code>时，<code>width</code>和<code>height</code>都需要写，更精准的控制图片大小</li></ul><h3 id="二、数学表达式"><a href="#二、数学表达式" class="headerlink" title="二、数学表达式"></a>二、数学表达式</h3><p>遇到数学表达式，该怎么写出来呢？</p><h4 id="1-幂运算"><a href="#1-幂运算" class="headerlink" title="1. 幂运算"></a>1. 幂运算</h4><h5 id="（1）HTML标签"><a href="#（1）HTML标签" class="headerlink" title="（1）HTML标签"></a>（1）HTML标签</h5><p>例如：10的5次方</p><p>实现：</p><pre class="line-numbers language-html"><code class="language-html">10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果： 10<sup>5</sup></p><h5 id="（2）Markdown语法"><a href="#（2）Markdown语法" class="headerlink" title="（2）Markdown语法"></a>（2）Markdown语法</h5><p>例如：10的5次方</p><p>实现：</p><pre><code>10^5^</code></pre><p>效果：10^5^</p><h4 id="2-Markdown中插入多行大括号公式"><a href="#2-Markdown中插入多行大括号公式" class="headerlink" title="2. Markdown中插入多行大括号公式"></a>2. Markdown中插入多行大括号公式</h4><h5 id="（1）方法1"><a href="#（1）方法1" class="headerlink" title="（1）方法1"></a>（1）方法1</h5><pre><code>$$ f(x)=\left\&amp;#123;\begin&amp;#123;aligned&amp;#125;x &amp; = &amp; \cos(t) \\y &amp; = &amp; \sin(t) \\z &amp; = &amp; \frac xy\end&amp;#123;aligned&amp;#125;\right.$$</code></pre><p>效果：<br>$$<br>f(x)=\left{ </p><p>\begin{aligned}</p><p> x &amp; = &amp; \cos(t) \</p><p> y &amp; = &amp; \sin(t) \ </p><p>z &amp; = &amp; \frac xy </p><p>\end{aligned} </p><p>\right.<br>$$</p><h5 id="（2）方法2"><a href="#（2）方法2" class="headerlink" title="（2）方法2"></a>（2）方法2</h5><pre><code>$$ F^&amp;#123;HLLC&amp;#125;=\left\&amp;#123;\begin&amp;#123;array&amp;#125;&amp;#123;rcl&amp;#125;F_L       &amp;      &amp; &amp;#123;0      &lt;      S_L&amp;#125;\\F^*_L     &amp;      &amp; &amp;#123;S_L \leq 0 &lt; S_M&amp;#125;\\F^*_R     &amp;      &amp; &amp;#123;S_M \leq 0 &lt; S_R&amp;#125;\\F_R       &amp;      &amp; &amp;#123;S_R \leq 0&amp;#125;\end&amp;#123;array&amp;#125; \right. $$</code></pre><p>效果：<br>$$<br>F^{HLLC}=\left{<br>\begin{array}{rcl}<br>F_L       &amp;      &amp; {0      &lt;      S_L}\<br>F^<em>_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\<br>F^</em>_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\<br>F_R       &amp;      &amp; {S_R \leq 0}<br>\end{array} \right.<br>$$</p><h5 id="（3）方法3"><a href="#（3）方法3" class="headerlink" title="（3）方法3"></a>（3）方法3</h5><pre><code>$$f(x)=\begin&amp;#123;cases&amp;#125;0&amp; \text&amp;#123;x=0&amp;#125;\\1&amp; \text&amp;#123;x!=0&amp;#125;\end&amp;#123;cases&amp;#125;$$</code></pre><p>效果：<br>$$<br>f(x)=<br>\begin{cases}<br>0&amp; \text{x=0}\<br>1&amp; \text{x!=0}<br>\end{cases}<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>141. 环形链表</title>
      <link href="/141-circular-linked-list.html"/>
      <url>/141-circular-linked-list.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个链表，判断链表中是否有环。</strong></p><p><strong>如果链表中有某个节点，可以通过连续跟踪<code>next</code>指针再次到达，则链表中存在环。为了表示给定链表中的环，我们使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从0开始）。如果<code>pos</code>是<code>-1</code>，则表示该链表中没有环。<code>注意：pos不作为参数进行传递，</code>仅仅是为了标识链表的实际情况。</strong></p><p><strong>如果链表中存在环，则返回<code>true</code>。否则，返回<code>false</code>。</strong></p><p><strong>进阶：</strong></p><p><strong>你能用O(1)（即，常量）内存解决此问题吗？</strong></p><p>示例1：</p><div align="left">    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist.png" width="40%"></div><pre><code>输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p>示例2：</p><div align="left">    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist_test2.png" width="25%"></div><pre><code>输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p>示例3：</p><div>    <img src="https://gitee.com/Arvin-He/blog-img/raw/master/post-img/141-circular_linked_list/circularlinkedlist_test3.png" width="10%"></div><pre><code>输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p>提示：</p><ul><li>链表中节点的数目范围是<code>[0, 10</code><sup>4</sup><code>]</code></li><li>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></li><li><code>pos</code>为 -1 或者链表中的一个有效索引。</li></ul><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-遍历"><a href="#1-遍历" class="headerlink" title="1. 遍历"></a>1. 遍历</h4><ul><li>对链表中的节点一个一个进行遍历</li><li>将遍历过的节点添加到数组中</li><li>每次遍历一个节点都判断其是否已添加到数组中</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-遍历-1"><a href="#1-遍历-1" class="headerlink" title="1. 遍历"></a>1. 遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            <span class="token keyword">if</span> head <span class="token keyword">in</span> ls<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 遍历</td><td align="center">1184ms</td><td align="center">5.12%</td><td align="center">16.2MB</td><td align="center">86.39%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6. Z字形变换</title>
      <link href="/6-zigzag-transformation.html"/>
      <url>/6-zigzag-transformation.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</strong></p><p><strong>比如输入字符串为 <code>"LEETCODEISHIRING"</code> 行数为 3 时，排列如下：</strong></p><pre><code>L   C   I   RE T O E S I I GE   D   H   N</code></pre><p><strong>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>"LCIRETOESIIGEDHN"</code>。</strong></p><p><strong>请你实现这个将字符串进行指定行数变换的函数：</strong></p><pre><code>string convert(string s, int numRows);</code></pre><p>示例1：</p><pre><code>输入: s = "LEETCODEISHIRING", numRows = 3输出: "LCIRETOESIIGEDHN"</code></pre><p>示例2：</p><pre><code>输入: s = "LEETCODEISHIRING", numRows =&nbsp;4输出:&nbsp;"LDREOEIIECIHNTSG"解释:L     D     RE   O E   I IE C   I H   NT     S     G来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/zigzag-conversion著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1. 二维数组"></a>1. 二维数组</h4><p>将传入的行数<code>numRows</code>作为二维数组的行数，也就是说<code>numRows</code>值等于内部嵌套的数组个数，例如<code>numRows=4</code>，则创建的二维数组为<code>res=[[], [], [], []]</code>.</p><p>接下来对数组进行填充：</p><ul><li>对字符串<code>s</code>进行遍历，然后将遍历的元素依次添加到二维数组中。</li><li>首先填充的是内部数组的下标为0位置上的元素，字符串<code>s</code>遍历的第一个元素添加到第一个数组，第二个元素已添加到第二个数组，第三个元素添加到第三个数组，第四个元素添加到第四个数组。到这里第一轮就结束了，然后反过来开始第二轮，然后到了第五个元素添加到第三个数组（也就是倒数第二个），往后都按照这个套路进行，直到遍历结束。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-二维数组-1"><a href="#1-二维数组-1" class="headerlink" title="1. 二维数组"></a>1. 二维数组</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token keyword">if</span> numRows <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建二维数组</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 选择指向数组的指针</span>        n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> ss <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token operator">-</span>numRows<span class="token punctuation">:</span>                    result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                    n <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 逆序循环结束，从下标为1（也就是第二个数组）的数组开始添加</span>                    n <span class="token operator">=</span> <span class="token number">1</span>                    result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                    n <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> n <span class="token operator">>=</span> numRows<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 当n大于二维数组的长度,开始逆序添加，从倒数第二个数组开始</span>                n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>                result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                n <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                n <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> result<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">方法</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1、二维数组</td><td align="center">76ms</td><td align="center">46.57%</td><td align="center">13.4MB</td><td align="center">34.17%</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 中等 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>344. 反转字符串</title>
      <link href="/344-reverse-string.html"/>
      <url>/344-reverse-string.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</strong></p><p><strong>不要给另外的数组分配额外的空间，你必须</strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组<strong>、使用 O(1) 的额外空间解决这一问题。</strong></p><p><strong>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符。</strong></p><p>示例1：</p><pre><code>输入：["h","e","l","l","o"]输出：["o","l","l","e","h"]</code></pre><p>示例2：</p><pre><code>输入：["H","a","n","n","a","h"]输出：["h","a","n","n","a","H"]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><ul><li>创建两个指针<code>m、n</code>，起始位置<code>m</code>指向第一个元素，<code>n</code>指向最后一个元素。</li><li>交换<code>m、n</code>指向的两个元素，然后<code>m+1</code>，<code>n-1</code>。</li></ul><h4 id="2-列表内置函数reverse"><a href="#2-列表内置函数reverse" class="headerlink" title="2. 列表内置函数reverse()"></a>2. 列表内置函数<code>reverse()</code></h4><h4 id="3-切片"><a href="#3-切片" class="headerlink" title="3. 切片"></a>3. 切片</h4><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双指针-1"><a href="#1-双指针-1" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            s<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>m<span class="token punctuation">]</span>            m <span class="token operator">+=</span> <span class="token number">1</span>            n <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-内置函数-reverse"><a href="#2-内置函数-reverse" class="headerlink" title="2. 内置函数 reverse()"></a>2. 内置函数 <code>reverse()</code></h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-切片-1"><a href="#3-切片-1" class="headerlink" title="3. 切片"></a>3. 切片</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">方法</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 双指针</td><td align="center">48ms</td><td align="center">78.20%</td><td align="center">14.3MB</td><td align="center">56.69%</td></tr><tr><td align="center">2. reverse（）</td><td align="center">52ms</td><td align="center">60.86%</td><td align="center">14.3MB</td><td align="center">67.78%</td></tr><tr><td align="center">3. 切片</td><td align="center">52ms</td><td align="center">60.86%</td><td align="center">14.6MB</td><td align="center">7.87%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 简单 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中reverse()和reversed()的用法</title>
      <link href="/usage-of-reverse-and-reversed-in-python.html"/>
      <url>/usage-of-reverse-and-reversed-in-python.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、reverse"><a href="#一、reverse" class="headerlink" title="一、reverse()"></a>一、<a href="https://www.programiz.com/python-programming/methods/list/reverse">reverse()</a></h3><ol><li><p><code>reverse()</code>是Python列表的一个内置方法</p><ul><li><p>不接收任何参数</p></li><li><p>只适用于列表</p></li><li><p>用于列表中元素的反转</p></li><li><p>返回值是<code>None</code>，直接作用于原列表</p></li></ul></li><li><p>示例</p><pre class="line-numbers language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>type<span class="token punctuation">(</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><blockquote><p>[3, 2, 1]</p><p>None</p><p>&lt;class ‘NoneType’&gt;</p></blockquote></li></ol><h3 id="二、reversed"><a href="#二、reversed" class="headerlink" title="二、reversed()"></a>二、<a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=reverse#reversed">reversed()</a></h3><ol><li><p><code>reversed()</code>是Python的一个内置方法（就是一个类）<a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=reverse#reversed">点击查看</a></p><ul><li>接收一个参数<code>seq</code>，seq必须是一个具有<code>__reversed__()</code>方法的对象或者是支持该序列协议（具有从0开始的整数类型参数的<code>__len__()</code>方法和<code>__getitem__()</code>方法）</li><li>适用于列表、元祖、字符串</li><li>反转可迭代序列中的值</li><li>结果返回一个迭代器，可通过遍历、list转化或者next方法获取值。</li></ul></li><li><p>示例</p><ul><li><p>列表</p><pre class="line-numbers language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>[3, 2, 1]</p></blockquote></li><li><p>元组</p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>(3, 2, 1)</p></blockquote></li><li><p>字符串</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>&lt;reversed object at 0xxxxxxxxx&gt;</p><p>dcba</p></blockquote></li></ul></li><li><p>注意</p><ul><li><p>对字典使用<code>reversed()</code>，得到错误<code>TypeError: 'dict' object is not reversible</code></p></li><li><p>对集合使用，错误<code>TypeError: 'set' object is not reversible</code></p></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 内置方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. 四数之和</title>
      <link href="/18-sum-of-four-numbers.html"/>
      <url>/18-sum-of-four-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个包含n个整数的数组<code>nums</code>和一个目标值<code>target</code>，判断<code>nums</code>中是否存在四个元素 a, b, c 和 d，使得 a+b+c+d 的值与<code>target</code>想等？找出所有满足条件且不重复的四元组。</strong></p><p><strong>注意：</strong></p><p><strong>答案中不可以包含重复的四元组。</strong></p><p>示例：</p><pre><code>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。满足要求的四元组集合为：[  [-1,  0, 0, 1],  [-2, -1, 1, 2],  [-2,  0, 0, 2]]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><p>参考LeetCode中<a href="https://leetcode-cn.com/problems/4sum/solution/shuang-zhi-zhen-gao-su-jie-fa-by-ml-zimingmeng/">腐烂的橘子</a>的题解</p><ul><li><p>因为结果中不能包含重复的四元组，所以可以先对数组进行递增排序，方便后边去重。</p></li><li><p>采用三层循环，依次创建四个指针<code>i、j、k、m</code></p></li><li><p>三层循环会大幅增加时间开销，所以可以在循环中进行条件判断，避免无用循环。</p><ul><li>比如最外层循环内可以加上判断条件：<code>nums[i] + 3 * nums[i+1] &gt; target</code>，因为<code>nums</code>为递增排序，所以再往后运算的数值也必定大于<code>target</code>，所以此处可以直接<code>break</code>。</li><li>接下来对条件<code>nums[i] + 3 * num[-1] &lt; target</code>判断，此时<code>nums[i]</code>加上任意其他的三个数也一定小于<code>target</code>，所以此处可以直接进行下次循环了。<ul><li>此处下一个数进行判断，如果<code>nums[i] == nums[i+1]</code>，执行<code>i += 1</code>，以此来达到去重的效果。</li></ul></li></ul></li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双指针-1"><a href="#1-双指针-1" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一层循环，选择第一个数，后边还有三个数，所以要减去3</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                 <span class="token keyword">break</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token number">-4</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 去重</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 此处指针指向的数与下一个数不相同，但是与前一个数还是相同的，所以要加1</span>                <span class="token keyword">continue</span>            diff1 <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> diff1<span class="token punctuation">:</span>                     <span class="token keyword">break</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> diff1<span class="token punctuation">:</span>                    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        j <span class="token operator">+=</span> <span class="token number">1</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">continue</span>                diff2 <span class="token operator">=</span> diff1 <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                m <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># 同时对后两个数判断</span>                <span class="token keyword">while</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> diff2<span class="token punctuation">:</span>                         k <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> diff2<span class="token punctuation">:</span>                         m <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        k <span class="token operator">+=</span> <span class="token number">1</span>                        m <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">and</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 去重</span>                            k <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>                             m <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">执行用时</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">91.96%</td><td align="center">13.5MB</td><td align="center">12.78%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/5-the-longest-palindrome-substring.html"/>
      <url>/5-the-longest-palindrome-substring.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个字符串<code>s</code>，找到<code>s</code>中最长的回文子串。你可以假设<code>s</code>的最大长度为1000。</strong></p><p>示例1：</p><pre><code>输入: "babad"输出: "bab"注意: "aba" 也是一个有效答案。</code></pre><p>示例2：</p><pre><code>输入: "cbbd"输出: "bb"</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双层循环"><a href="#1-双层循环" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><ul><li>第一层循环控制元素遍历起始位置</li><li>第二层循环控制遍历后边的元素</li><li>把内层循环的元素累加到一个变量 cur 上，每累加一个就判断当前子串cur是否为回文串，并且长度是否大于前边保存的回文子串，条件成立，则对结果更新。</li></ul><h4 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2. 动态规划"></a>2. 动态规划</h4><p>首先上<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/">LeetCode官方题解</a></p><p>再来一个写的比较好的题解<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/">liweiwei1419</a></p><hr><p>对于一个子串，并且长度大于2，如果它是回文串，那么去掉两头的元素以后，它依然是回文串。</p><p>我们设<code>i</code>、<code>j</code>分别为子串的起始位置和结束位置，用<code>P(i,j)</code>来表示这个子串，那么对于子串<code>P(i,j)</code>是否为回文串就有两种可能：<br>$$<br>P(i,j)=\left{<br>\begin{array}{rcl}<br>true, &amp; &amp; {如果子串S_i……S_j是回文串}\<br>false,&amp;      &amp; {其他情况}\<br>\end{array} \right.<br>$$<br>可以写出动态规划的状态转移方程为：<br>$$<br>P(i,j)=P(i+1,j-1) \and (S_i == S_j)<br>$$<br>也就是说，只有<code>s[i+1:j-1]</code>是回文串，并且 s 的第 i 个元素与第 j 个元素相同时，<code>P[i:j]</code>是回文串。</p><p>以上为子串长度大于2的情况，下边讨论子串长度小于等于2的情况。</p><p>子串长度为1时，子串必是回文串；子串长度为2时，只要这两个元素相同，那么就是回文串。因此我们可以得出动态规划的边界条件：<br>$$<br>\left{<br>\begin{array}<br> P(i,i)=true\<br>P(i,i+1)=(S_i==S_j)<br>\end{array} \right.<br>$$<br>根据这个思路，我们就可以完成动态规划了。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双层循环-1"><a href="#1-双层循环-1" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if length == 0 or length == 1:</span>        <span class="token comment" spellcheck="true">#    return s</span>        ans <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">+=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur <span class="token operator">==</span> cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans <span class="token operator">=</span> cur        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-动态规划-1"><a href="#2-动态规划-1" class="headerlink" title="2. 动态规划"></a>2. 动态规划</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> length <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token comment" spellcheck="true"># 子串长度实际为n+1</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 子串开始位置</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 子串结束位置</span>                j <span class="token operator">=</span> i <span class="token operator">+</span> n                <span class="token keyword">if</span> j <span class="token operator">>=</span> length<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">and</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><h4 id="1-双层循环-2"><a href="#1-双层循环-2" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><table><thead><tr><th align="center">method</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 双循环</td><td align="center">8176ms</td><td align="center">5.01%</td><td align="center">13.1MB</td><td align="center">97.83%</td></tr><tr><td align="center">2. 动态规划</td><td align="center">9948ms</td><td align="center">5.01%</td><td align="center">20.9MB</td><td align="center">28.50%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitee创建自己的图床</title>
      <link href="/use-gitee-to-create-your-own-image-bed.html"/>
      <url>/use-gitee-to-create-your-own-image-bed.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>平时写点东西都会配个图，使用的七牛云做图床。突然有一天，打开谷歌浏览器，打开博客页，发现图片全加载不出来了。开始还以为是网速不好，又刷新了两遍结果还是不行。然后使用edge等等其他浏览器却都没问题。F12以后，看到ERR_SSL_VERSION_OR_CIPHER_MISMATCH错误，并且图片的HTTP协议全部自动变成了HTTPS的，然后就谷歌了一下，发现是谷歌的问题。只要域名为HTTPS的情况下，页面内的所有HTTP都会转换为HTTPS。</p><p>好吧，目前来说已经知道问题所在了，那就该就决问题了。</p><h3 id="二、解决问题"><a href="#二、解决问题" class="headerlink" title="二、解决问题"></a>二、解决问题</h3><p>实际上这个问题很好解决，只需要到<a href="https://portal.qiniu.com/cdn/domain">七牛云</a>的CDN域名管理页面，配置相应域名，开启HTTPS即可。</p><p>可是一旦开启HTTPS以后，通过HTTPS的流量将不计算入免费流量，那以后再使用的话就需要交流量费了，对于一个资深白嫖用户来说，真的太难受了。然后就开始了谷歌之路。</p><p>在一通谷歌加测试以后，那些方法全没用。</p><p>最后，在舍不得一点流量费的情况下，温柔地打开了gitee。<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">PicGo</a> + gitee组合，将码云作为图床使用。</p><p>注意：在创建图床仓库时，要选择<code>公开</code>模式，否则图片无法访问。</p><h3 id="三、gitee-PicGo-创建自己的图床"><a href="#三、gitee-PicGo-创建自己的图床" class="headerlink" title="三、gitee + PicGo 创建自己的图床"></a>三、gitee + PicGo 创建自己的图床</h3><ol><li>创建一个新的仓库，选择<code>公开</code>模式，其他的选项照常选择</li><li>下载<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">PicGo</a>，然后安装</li><li>打开PicGo，选择插件设置，搜索 gitee，然后任选一个gitee插件下载。下载完以后，可以看到图床设置中已经有了gitee图床。</li><li>选择gitee图床，然后在右边的gitee图床设置界面填写必要信息。<ul><li>owner：填写自己的用户名</li><li>repo：仓库名</li><li>path：在仓库中图片保存的目录路径，可以不填，默认为根目录</li><li>token：在gitee用户设置中，选择<code>Personal access tokens</code>，然后点击右边的<code>Generate new token</code>生成新的token。然后复制粘贴进来即可。</li><li>message： commit 时的信息，保持默认即可。</li></ul></li><li>点击确定即可。可以将其设置为默认图床，这样一来在上传图片的时候就不用再选择图床了</li><li>回到上传区。右边上传区上边可以选择图床，中间为上传区域，下边可以选择生成的链接格式。</li><li>选择一张图片上传，完成后，生成的链接已经保存在剪切板，直接在需要的地方粘贴即可。</li><li>结束</li></ol><p><strong>注意：图片过大的话会导致无法加载出来，推荐使用<code>小于1MB</code>的图片。再大就会出现加载不出来的情况。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> 图床 </tag>
            
            <tag> ssl </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>235. 二叉搜索树的最近公共祖先</title>
      <link href="/235-the-nearest-common-ancestor-of-binary-search-tree.html"/>
      <url>/235-the-nearest-common-ancestor-of-binary-search-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</strong></p><p>百度百科<strong>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”**</strong></p><p><strong>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png"></p><p>示例1：</p><pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6 解释: 节点 2 和节点 8 的最近公共祖先是 6。</code></pre><p>示例2：</p><pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</code></pre><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q为不同节点且均存在于给定的二叉搜索树中。</li></ul><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>对于搜索二叉树，整体节点值的大小为<code>右子树 &gt; 根 &gt; 左子树</code>，所以大概思路就如下边所述：</p><ul><li>用根节点的大小与p、q比较</li><li>如果 root 节点值大于p、q，那么 说明p、q位于二叉搜索树的左子树，所以<code>root = root.left</code>，继续比较</li><li>如果root节点值小于p、q，那么说明q、p位于二叉搜索树的右子树，然后对root重新赋值<code>root = root.right</code>。</li><li>如果root节点的值大于p、q其中的一个、小于另外一个（包括剩余的其他情况下），那么说明root节点位于p、q节点的中间。</li><li>将root返回</li></ul><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'TreeNode'</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> root<span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val <span class="token operator">and</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">and</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-表现"><a href="#3-表现" class="headerlink" title="3. 表现"></a>3. 表现</h4><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">84ms</td><td align="center">98.60%</td><td align="center">17.3MB</td><td align="center">73.69%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>501. 二叉搜索树中的众数</title>
      <link href="/501-mode-in-binary-search-tree.html"/>
      <url>/501-mode-in-binary-search-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</strong></p><p><strong>假定 BST 有如下定义：</strong></p><ul><li>结点左子树中所含结点的值小于等于当前结点的值</li><li>结点右子树中所含结点的值大于等于当前结点的值</li><li>左子树和右子树都是二叉搜索树</li></ul><p>例如：</p><p>给定BST<code>[1, null, 2, 2]</code>,</p><pre><code>     1     \      2     /    2</code></pre><p><code>返回[2]</code>。</p><p><strong>提示：如果众数超过1个，不需考虑输出顺序</strong></p><p><strong>进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</strong></p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>搜索二叉树进行中序遍历，得到的结果是<code>有序</code>的，所以结果中的相同的数是连续出现的，只需要统计 出现的次数，然后比较找到出现次数最多的一个或多个数保存返回即可。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 当当前节点值与前一个不一样时，对保存的数值与出现的次数进行更新</span>        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal result            <span class="token keyword">if</span> sums <span class="token operator">></span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cur<span class="token punctuation">]</span>                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sums            <span class="token keyword">elif</span> sums <span class="token operator">==</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal sums<span class="token punctuation">,</span> cur            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">:</span>                    sums <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    update<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span>                    cur <span class="token operator">=</span> root<span class="token punctuation">.</span>val                    sums <span class="token operator">=</span> <span class="token number">0</span>                    sums <span class="token operator">+=</span> <span class="token number">1</span>                inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第一个数组元素负责保存出现的一个或多个出现次数一样的众数；</span>        <span class="token comment" spellcheck="true"># 第二个元素是出现的次数</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 统计每个数出现的次数</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 当前的数</span>        cur <span class="token operator">=</span> <span class="token string">''</span>        inOrder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 特殊情况：最后连续多个数都一样，在递归中没有被统计进去</span>        update<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">104ms</td><td align="center">8.63%</td><td align="center">17.2MB</td><td align="center">67.22%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 无重复字符的最长子串</title>
      <link href="/3-the-longest-substring-without-repeated-characters.html"/>
      <url>/3-the-longest-substring-without-repeated-characters.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个字符串，请你找出其中不含有重复字符的<code>最长子串</code>的长度。</strong></p><p>示例1：</p><pre><code>输入: "abcabcbb"输出: 3 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</code></pre><p>示例2：</p><pre><code>输入: "bbbbb"输出: 1解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</code></pre><p>示例3：</p><pre><code>输入: "pwwkew"输出: 3解释: 因为无重复字符的最长子串是&nbsp;"wke"，所以其长度为 3。&nbsp;    请注意，你的答案必须是 子串 的长度，"pwke"&nbsp;是一个子序列，不是子串。</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>使用两个for循环，外层循环控制起始位置，内层循环从起始元素开始，将未重复元素添加到一个临时数组，遇到重复元素就退出循环。将临时数组的长度也就是子串的长度添加到一个数组。最后比较数组内所有元素的最大值便是最长子串的长度。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 默认子串长度为0</span>        <span class="token comment" spellcheck="true"># 1 使用常数统计最长子串长度</span>        <span class="token comment" spellcheck="true"># result = 0</span>        <span class="token comment" spellcheck="true"># 2 使用数组统计所有子串长度</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> cur<span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#if len(cur) > result:</span>            <span class="token comment" spellcheck="true">#    result = len(cur)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#return result</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-表现"><a href="#3-表现" class="headerlink" title="3. 表现"></a>3. 表现</h4><table><thead><tr><th align="center">记录方式</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2168ms</td><td align="center">4%</td><td align="center">13.4MB</td><td align="center">32%</td></tr><tr><td align="center">2</td><td align="center">2164ms</td><td align="center">5.01%</td><td align="center">13.3MB</td><td align="center">84.95%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 两数相加</title>
      <link href="/2-add-two-numbers.html"/>
      <url>/2-add-two-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给出两个<code>非空</code> 的链表用来表示两个<code>非负</code>的整数。其中，它们各自的位数是按照 <code>逆序</code>的方式存储的，并且它们的每个节点只能存储<code>一位</code> 数字。</strong></p><p><strong>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</strong></p><p><strong>您可以假设除了数字0之外，这两个数都不会以0开头。</strong></p><p>示例：</p><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>没什么特殊方法，一个一个遍历。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建链表头结点</span>        new_list <span class="token operator">=</span> cur <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token operator">or</span> l2 <span class="token operator">or</span> sums<span class="token punctuation">:</span>            sums <span class="token operator">+=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token keyword">if</span> l1 <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token keyword">if</span> l2 <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            sums<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val <span class="token operator">=</span> divmod<span class="token punctuation">(</span>sums<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next <span class="token keyword">if</span> l1 <span class="token keyword">else</span> None            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next <span class="token keyword">if</span> l2 <span class="token keyword">else</span> None         <span class="token keyword">return</span> new_list<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、表现"><a href="#三、表现" class="headerlink" title="三、表现"></a>三、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">20.49%</td><td align="center">13.3MB</td><td align="center">74.92%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 链表 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>617. 合并二叉树</title>
      <link href="/617-merging-binary-trees.html"/>
      <url>/617-merging-binary-trees.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</strong></p><p><strong>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</strong></p><p>示例 1:</p><pre><code>输入:     Tree 1                     Tree 2                            1                         2                                      / \                       / \                                    3   2                     1   3                               /                           \   \                            5                             4   7                  输出: 合并后的树:         3        / \       4   5      / \   \      5   4   7来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/merge-two-binary-trees著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><strong>注意: 合并必须从两个树的根节点开始。</strong></p><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="（1）思路描述"><a href="#（1）思路描述" class="headerlink" title="（1）思路描述"></a>（1）思路描述</h4><ul><li>首先我选择使用层次遍历的方式来写这道题。</li><li>其次是将 Tree2 合并到 Tree1 上边，作为一颗新的二叉树返回</li><li>方向确定了，接下来就是程序实现的设计了</li><li>首先判断传入函数的 t1 、t2是否为None，t1为None返回t2，t2为None返回t1，都为None返回None。t1和t2都不为None，接着往下走</li><li>定义两个队列<code>dequeue1</code>保存Tree1的层次遍历节点，<code>dequeue2</code>保存Tree2的遍历节点。首先将t1、t2分别添加到dequeue1和dequeue2</li><li>接着循环遍历往下走：<ul><li>进入循环首先实现根节点的值的更新</li><li>接下来每一次遍历对节点左右子树进行判断<ul><li>t1和t2左右子树都存在，则分别添加到队列中</li><li>如果t1的左子树或右子树存在，t2的左子树或右子树不存在。这时是不需要做任何操作的</li><li>如果t2的左子树或右子树存在，t1的左子树或右子树不存在。那么需要将t2的左子树或者右子树添加到t1的</li></ul></li></ul></li><li>最后返回t1即可。</li></ul><h4 id="（2）代码实现"><a href="#（2）代码实现" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t1<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> t2<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''层次遍历'''</span>        <span class="token comment" spellcheck="true"># 1、首先对t1和t2进行判断</span>        <span class="token keyword">if</span> t1 <span class="token operator">and</span> <span class="token operator">not</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span> t1        <span class="token keyword">elif</span> <span class="token operator">not</span> t1 <span class="token operator">and</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span> t2        <span class="token keyword">elif</span> <span class="token operator">not</span> t1 <span class="token operator">and</span> <span class="token operator">not</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span>         <span class="token comment" spellcheck="true"># 2、定义队列保存遍历节点</span>        dequeue1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dequeue2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>        dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>        <span class="token keyword">while</span> dequeue1 <span class="token operator">and</span> dequeue2<span class="token punctuation">:</span>            d1 <span class="token operator">=</span> dequeue1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            d2 <span class="token operator">=</span> dequeue2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对根的值进行更新</span>            d1<span class="token punctuation">.</span>val <span class="token operator">=</span> d1<span class="token punctuation">.</span>val <span class="token operator">+</span> d2<span class="token punctuation">.</span>val            <span class="token comment" spellcheck="true"># 左右子树判断</span>            <span class="token keyword">if</span> d1<span class="token punctuation">.</span>left <span class="token operator">and</span> d2<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">elif</span> d2<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                d1<span class="token punctuation">.</span>left <span class="token operator">=</span> d2<span class="token punctuation">.</span>left            <span class="token keyword">if</span> d1<span class="token punctuation">.</span>right <span class="token operator">and</span> d2<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">elif</span> d2<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                d1<span class="token punctuation">.</span>right <span class="token operator">=</span> d2<span class="token punctuation">.</span>right         <span class="token keyword">return</span> t1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）表现"><a href="#（3）表现" class="headerlink" title="（3）表现"></a>（3）表现</h4><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">100ms</td><td align="center">91.61%</td><td align="center">14.3MB</td><td align="center">88.39%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>538. 把二叉搜索树转换为累加树</title>
      <link href="/538-convert-binary-search-tree-to-accumulative.html"/>
      <url>/538-convert-binary-search-tree-to-accumulative.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree），使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</strong></p><p>例如：</p><pre><code>输入: 原始二叉搜索树:              5            /   \           2     13输出: 转换为累加树:             18            /   \          20     13来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/convert-bst-to-greater-tree著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ul><li>因为是二叉搜索树，所以节点值的大小顺序为<code>左 &lt; 根 &lt; 右</code></li><li>大小顺序像极了中序遍历<code>2 5 13</code></li><li>就以题目中的二叉搜索树为例，右子树的值13不变，根的值等于5+13=18。左子树节点的值为13+5+2=20，更进一步就是18+2=20。</li><li>所以中序遍历逆向依次累加，便是结果。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''中序遍历，逆序'''</span>        <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal sums            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                recursion<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                sums <span class="token operator">+=</span> root<span class="token punctuation">.</span>val                root<span class="token punctuation">.</span>val <span class="token operator">=</span> sums                recursion<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        recursion<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">37.41%</td><td align="center">15.5MB</td><td align="center">47.41%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78. 子集</title>
      <link href="/78-subset.html"/>
      <url>/78-subset.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一组<code>不含重复元素</code>的整数数组 nums，返回该数组所有可能的子集（幂集）。</strong></p><p><strong>说明：解集不能包含重复的子集。</strong></p><p><strong>示例：</strong></p><pre><code>输入：nums = [1, 2, 3]输出：[  [3],&nbsp; [1],&nbsp; [2],&nbsp; [1,2,3],&nbsp; [1,3],&nbsp; [2,3],&nbsp; [1,2],&nbsp; []]</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-利用-Python-的-itertools-库的-combinations函数"><a href="#1-利用-Python-的-itertools-库的-combinations函数" class="headerlink" title="1. 利用 Python 的 itertools 库的 combinations函数"></a>1. 利用 Python 的 <code>itertools</code> 库的 <code>combinations</code>函数</h4><h5 id="（1）描述"><a href="#（1）描述" class="headerlink" title="（1）描述"></a>（1）描述</h5><p><code>itertools</code> — 为高效循环而创建迭代器的函数（Python文档中的描述）</p><p>本模块实现一系列 iterator ，这些迭代器受到APL，Haskell和SML的启发。为了适用于Python，它们都被重新写过。本模块标准化了一个快速、高效利用内存的核心工具集，这些工具本身或组合都很有用。它们一起形成了“迭代器代数”，这使得在纯Python中有可能创建简洁又高效的专用工具。（<a href="https://docs.python.org/zh-cn/3/library/itertools.html">Python文档描述</a>）</p><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.combinations"><code>combinations</code>函数的使用</a></p><p><code>itertools.combinations(iterable, n)</code></p><blockquote><p>结果返回由可迭代对象 iterable 中的元素组成的长度为 n 的子序列（每个子序列都是元组的形式；当 n 大于 iterable 序列的长度时，返回的子序列与 iterable 一样）</p><p>返回的结果是按照 iterable 的顺序发出的，如果 iterable 有序，则结果按照已排序的顺序发出。</p><p>如果 iterable 中有重复的元素，但是不同位置的元素依然会被认为是不同的。</p></blockquote><h5 id="（2）代码实现"><a href="#（2）代码实现" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinations<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># 保存结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 因为iterable的子集也包括它本身，所以要+1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现"><a href="#（3）表现" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">16ms</td><td align="center">88.56%</td><td align="center">12.8MB</td><td align="center">6.60%</td></tr></tbody></table><h4 id="2-递归（回溯）"><a href="#2-递归（回溯）" class="headerlink" title="2. 递归（回溯）"></a>2. 递归（回溯）</h4><h5 id="（1）描述-1"><a href="#（1）描述-1" class="headerlink" title="（1）描述"></a>（1）描述</h5><img src="https://pic.leetcode-cn.com/1600597534-AVwJtB-file_1600597536187" alt="参考LeetCode题解中 大梦三千秋 的题解" style="zoom: 80%;"><ul><li><p>对树结构进行遍历的话，顺序为</p><p><code>[[], </code></p><p><code>[1], [1, 2], [1, 2, 3], </code></p><p><code>[1, 3],</code></p><p><code>[2], [2, 3], </code></p><p><code>[3]]</code></p></li><li><p>因为解集中包含空集，所以可以在进入递归之前先把子集添加到解集中</p></li><li><p>元素个数又是有限的，可以不设置递归终止条件</p></li><li><p>对结果分析，大概的逻辑就是（定义一个数组<code>ans</code>临时保存子集，数组<code>result</code>保存结果子集）：</p><ul><li>进入递归函数内，首先把 ans数组内的 子集保存到数组result中</li><li>遍历数组nums第一个元素 1，将元素 1 添加到 ans 中，进入递归，以下一个下标为1的元素 2 作为递归起点；进入递归函数首先将 ans 中子集 [1] 添加到 result 中，然后将元素 2 添加到 ans 中，递归。将下一个下标为2的元素 3 的作为递归起点；将 ans 子集 [1，2] 添加到result。将元素 3 添加到ans中 ，将下标3传入进入下一次递归；将子集[1, 2, 3]添加到result中。这时已经不满足遍历条件，此次递归结束，返回元素3的递归中。</li><li>在元素3的递归这一层接下来回溯，将ans最后一个元素也就是3删除。然后返回元素2的这层递归，此时ans为[1, 2]，接下来依然是回溯，删除元素2,。数组nums的遍历继续，接下来轮到元素3，然后将元素3添加到ans，此时ans为[1, 3]，然后进入递归。接下来的操作就与前边的基本一致。</li><li>到了这里，程序的基本架构就已经出来了。下边写代码。</li></ul></li></ul><h5 id="（2）代码实现-1"><a href="#（2）代码实现-1" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># 1、定义解集、子集的数组</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 递归函数 </span>        <span class="token keyword">def</span> <span class="token function">sets</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将子集保存到解集中</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 遍历数组nums</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 递归</span>                sets<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            sets<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-1"><a href="#（3）表现-1" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">16ms</td><td align="center">88.48%</td><td align="center">12.6MB</td><td align="center">49.16%</td></tr></tbody></table><h4 id="3-位运算"><a href="#3-位运算" class="headerlink" title="3. 位运算"></a>3. 位运算</h4><h5 id="（1）描述-2"><a href="#（1）描述-2" class="headerlink" title="（1）描述"></a>（1）描述</h5><p>直接上图：</p><table><thead><tr><th align="center">0/1序列</th><th align="center">子集</th><th align="center">0/1序列对应的二进制数</th></tr></thead><tbody><tr><td align="center">000</td><td align="center">[]</td><td align="center">0</td></tr><tr><td align="center">001</td><td align="center">[3]</td><td align="center">1</td></tr><tr><td align="center">010</td><td align="center">[2]</td><td align="center">2</td></tr><tr><td align="center">011</td><td align="center">[2,3]</td><td align="center">3</td></tr><tr><td align="center">100</td><td align="center">[1]</td><td align="center">4</td></tr><tr><td align="center">101</td><td align="center">[1,3]</td><td align="center">5</td></tr><tr><td align="center">110</td><td align="center">[1,2]</td><td align="center">6</td></tr><tr><td align="center">111</td><td align="center">[1,2,3]</td><td align="center">7</td></tr></tbody></table><p>0 表示不在当前对应位置的元素不在子集中；1 表示在子集中。</p><h5 id="（2）代码实现-2"><a href="#（2）代码实现-2" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> length        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">>></span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-2"><a href="#（3）表现-2" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">44ms</td><td align="center">49.72%</td><td align="center">13.2MB</td><td align="center">98.84%</td></tr></tbody></table><h4 id="4-迭代（在题解中发现的一种方法）"><a href="#4-迭代（在题解中发现的一种方法）" class="headerlink" title="4. 迭代（在题解中发现的一种方法）"></a>4. 迭代（在题解中发现的一种方法）</h4><h5 id="（1）描述-3"><a href="#（1）描述-3" class="headerlink" title="（1）描述"></a>（1）描述</h5><p>以示例中的[1, 2, 3]为例：</p><p>子集结果为：[[], [1], [1, 2], [1, 3], [2], [2, 3], [3], [1, 2, 3]]</p><p><strong>分析：</strong>（下边分析 = 表示等号，不代表赋值）</p><ul><li>[] + [1] = [1]，同理可得[2]，[3]</li><li>如果设子集初始为[[]]，然后[] 与 [1] 相加，将结果 [1] 添加到子集数组中得到 [[], [1]]</li><li>然后用子集 [[], [1]] 中的元素分别与 [2] 相加得到 [2]、[1, 2]，然后将结果再添加到子集中，结果为 [[], [1], [2], [1, 2]]。往下 [3] 类推….</li><li>最后可得出完整的子集数组</li></ul><h5 id="（2）代码实现-3"><a href="#（2）代码实现-3" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> num <span class="token keyword">for</span> num <span class="token keyword">in</span> result<span class="token punctuation">]</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-3"><a href="#（3）表现-3" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">24ms</td><td align="center">39.88%</td><td align="center">12.6MB</td><td align="center">33.01%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 两数之和</title>
      <link href="/1-the-sum-of-two-numbers.html"/>
      <url>/1-the-sum-of-two-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>,请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</strong></p><p><strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</strong></p><p>示例：</p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-第一种思路"><a href="#1-第一种思路" class="headerlink" title="1. 第一种思路"></a>1. 第一种思路</h4><p>这种方法比较粗暴并且很笨了。首先用目标值减去数组中的第一个（下标为0）的元素，然后判断差值是否在数组剩余元素num[1:]中。如果在，得到结果；如果不在，然后再用目标值减去第二个元素，判断差值是否在数组num[2：]…..。就这样直至得到结果。</p><h4 id="2-第二种思路"><a href="#2-第二种思路" class="headerlink" title="2. 第二种思路"></a>2. 第二种思路</h4><p>利用哈希表，数组中的元素的值与对应的下标作为键值映射。然后用目标值依次与数组中的元素做差，然后差值作键在哈希表中获取对应的下标，返回最终结果。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-第一种思路-1"><a href="#1-第一种思路-1" class="headerlink" title="1. 第一种思路"></a>1. 第一种思路</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> diff <span class="token keyword">in</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 获取第二个数在切片数组中的下标</span>                index <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 下边用try...except写的</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 不再用if判断diff是否在数组中</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 获取第二个数在切片数组中的下标</span>                index <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-第二种思路-1"><a href="#2-第二种思路-1" class="headerlink" title="2. 第二种思路"></a>2. 第二种思路</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        hashmap <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、结果"><a href="#四、结果" class="headerlink" title="四、结果"></a>四、结果</h3><table><thead><tr><th align="center">方法</th><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">第一种：if…in..</td><td align="center">680ms</td><td align="center">49%</td><td align="center">13.1MB</td><td align="center">79%</td></tr><tr><td align="center">第一种：try…except…</td><td align="center">752ms</td><td align="center">49.54%</td><td align="center">13.1MB</td><td align="center">90.42%（疑惑）</td></tr><tr><td align="center">第二种</td><td align="center">16ms</td><td align="center">99.20%</td><td align="center">13.5MB</td><td align="center">31.53%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>404. 左叶子之和</title>
      <link href="/404-sum-of-left-leaves.html"/>
      <url>/404-sum-of-left-leaves.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>计算给定二叉树的所有左叶子之和</strong></p><p>示例：</p><pre><code>    3   / \  9  20    /  \   15   7在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ul><li><p>看到题目中的<code>二叉树</code>时，首先想到要用深度优先遍历或者广度优先遍历</p></li><li><p>接下来往下看<code>左叶子之和</code>，然后就想到了先序遍历、中序遍历、后序遍历。</p></li><li><p>题目中要求只计算左叶子之和，所以就考虑使用这三种遍历的非递归方式</p><p><strong>所以最后，还是选择使用的后序遍历的非递归实现</strong></p></li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1、先序遍历"><a href="#1、先序遍历" class="headerlink" title="1、先序遍历"></a>1、先序遍历</h4><p>后续补上</p><h4 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h4><p>后续补上</p><h4 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 首先判断root如果为None，返回值为0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 保存左叶子节点的值</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 临时保存节点的栈</span>            stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 左子树节点为叶子结点</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                 <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>             <span class="token keyword">return</span> sum<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、结果"><a href="#四、结果" class="headerlink" title="四、结果"></a>四、结果</h3><h4 id="1、先序遍历-1"><a href="#1、先序遍历-1" class="headerlink" title="1、先序遍历"></a>1、先序遍历</h4><h4 id="2、中序遍历-1"><a href="#2、中序遍历-1" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h4><h4 id="3、后序遍历-1"><a href="#3、后序遍历-1" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><table><thead><tr><th align="center"></th><th align="center">运行时间</th><th align="center"></th><th align="center">内存消耗</th><th align="center"></th></tr></thead><tbody><tr><td align="center">第一次</td><td align="center">28ms</td><td align="center">超过18%</td><td align="center">12.7MB</td><td align="center">超过93%</td></tr><tr><td align="center">第二次</td><td align="center">20ms</td><td align="center">超过70%</td><td align="center">12.8MB</td><td align="center">超过80%</td></tr></tbody></table><p>接下来，学习学习别人的思路，再接着优化吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写python脚本实现自动更新码云pages</title>
      <link href="/write-python-script-to-automatically-update-code-cloud-pages.html"/>
      <url>/write-python-script-to-automatically-update-code-cloud-pages.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>使用码云的pages部署hexo静态博客以后，每次写完都要去手动更新，实在是麻烦。当然只要开会员，这个问题根本不叫问题。但是，对于一个自身白嫖党而言，不可能的，这辈子也不可能的。</p><p>所以，只能自力更生、艰苦奋斗了。</p><h3 id="二、想法"><a href="#二、想法" class="headerlink" title="二、想法"></a>二、想法</h3><p>利用<strong>selenium</strong>编写python脚本，实现模拟登录更新，这样就不用了每次都自己登录码云，然后手动更新了。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token comment" spellcheck="true"># 基本信息</span>username <span class="token operator">=</span> <span class="token string">'xxxx'</span>  <span class="token comment" spellcheck="true"># 账号</span>password <span class="token operator">=</span> <span class="token string">'xxxx'</span>     <span class="token comment" spellcheck="true"># 密码</span>pickname <span class="token operator">=</span> <span class="token string">'xxxx'</span>   <span class="token comment" spellcheck="true"># 用户名</span>repo <span class="token operator">=</span> <span class="token string">'xxxx'</span>       <span class="token comment" spellcheck="true"># 仓库名</span>driver <span class="token operator">=</span> r<span class="token string">'D:\Desktop\chromedriver.exe'</span>     <span class="token comment" spellcheck="true"># 谷歌驱动的路径</span>options <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 不显示界面</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--start-maximized"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 窗口最大化</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--disable-plugins"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 禁止扩展</span>chrome <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>driver<span class="token punctuation">,</span> options<span class="token operator">=</span>options<span class="token punctuation">)</span>chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://gitee.com/login'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输入用户名、密码，登录</span>username_input <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"user_login"</span><span class="token punctuation">)</span>password_input<span class="token operator">=</span>  chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"user_password"</span><span class="token punctuation">)</span>login_btn <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"commit"</span><span class="token punctuation">)</span>username_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>username<span class="token punctuation">)</span>password_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>password<span class="token punctuation">)</span>login_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待页面加载完成</span>WebDriverWait<span class="token punctuation">(</span>chrome<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_all_elements_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"ml-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 跳转到page页面</span>chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://gitee.com/'</span> <span class="token operator">+</span> pickname <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> repo <span class="token operator">+</span> <span class="token string">'/pages'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待页面加载完成</span>WebDriverWait<span class="token punctuation">(</span>chrome<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_all_elements_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"update_deploy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行js代码，使页面向下滚动</span>chrome<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.scrollTo(100, document.body.scrollHeight);"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击更新按钮</span>update_btn <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"update_deploy"</span><span class="token punctuation">)</span>update_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击确认框</span>alert <span class="token operator">=</span> chrome<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>alertalert<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gitee pages 更新成功'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chrome<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后续目标"><a href="#四、后续目标" class="headerlink" title="四、后续目标"></a>四、后续目标</h3><p>目前基本目标已经可以实现，不过每次还需要手动执行脚本，拉胯<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span>。所以，接下来试着将脚本放到GitHub action上边去，实时监控码云仓库变化，实现实时更新。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
            <tag> 码云 </tag>
            
            <tag> pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode中配置代码静态检查工具pylint</title>
      <link href="/configure-code-static-checking-tool-pylint-in-vscode.html"/>
      <url>/configure-code-static-checking-tool-pylint-in-vscode.html</url>
      
        <content type="html"><![CDATA[<p><strong>刚开始使用VScode编写python代码时，总是会收到<code>Linter pylint is not installed</code>的提示，下边记录关于VScode配置代码静态检查工具和代码格式化工具。</strong></p><p><strong>关于如何配置点进去看这篇文章吧（<a href="https://blog.csdn.net/sunxb10/article/details/80984243">点我跳转</a>）</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
            <tag> pylint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的先序遍历、中序遍历和后序遍历</title>
      <link href="/preorder-traversal-middleorder-and-postorder-of-binary-tree.html"/>
      <url>/preorder-traversal-middleorder-and-postorder-of-binary-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>二叉树是一种非常重要的数据机构，对树节点的访问方式包括了深度优先遍历（DFS）和广度优先遍历（BFS）。其中深度优先遍历包括了先序遍历、中序遍历和后序遍历，广度优先遍历也就是层次遍历。下边只讲深度优先遍历的这三种。</p><h3 id="二、三种遍历方式的区别"><a href="#二、三种遍历方式的区别" class="headerlink" title="二、三种遍历方式的区别"></a>二、三种遍历方式的区别</h3><p><strong>先上张二叉搜索树（Binary Search Tree）图</strong></p><img src="https://pic.leetcode-cn.com/46d010607b947a903de5ce23fcbf9cbb905b36c3f2442d68459872203dee057f.png" width="50%" height="50%"><h4 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><ul><li><p><strong>遍历方式：根节点 -&gt; 左子树 -&gt; 右子树</strong></p></li><li><p><strong>遍历结果：5214367</strong></p></li></ul><h4 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 根节点 -&gt; 右子树</strong></li><li><strong>遍历结果：1234567</strong></li></ul><h4 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="3. 后序遍历"></a>3. 后序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 右子树 -&gt; 根节点</strong></li><li><strong>遍历结果：1342765</strong></li></ul><h3 id="三、Python实现"><a href="#三、Python实现" class="headerlink" title="三、Python实现"></a>三、Python实现</h3><p><strong>二叉树的实现代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    定义二叉树节点    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-先序遍历-1"><a href="#1-先序遍历-1" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><h5 id="（1）-递归实现"><a href="#（1）-递归实现" class="headerlink" title="（1） 递归实现"></a>（1） 递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""递归实现二叉树的"""</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type p: 二叉树根节点        """</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 节点为None</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>         result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先遍历左子树再遍历右子树</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）非递归实现"><a href="#（2）非递归实现" class="headerlink" title="（2）非递归实现"></a>（2）非递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""非递归实现先序遍历"""</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> p <span class="token operator">or</span> stack<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 节点非None</span>            <span class="token keyword">while</span> p<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left            p <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-中序遍历-1"><a href="#2-中序遍历-1" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><h5 id="（1）递归实现"><a href="#（1）递归实现" class="headerlink" title="（1）递归实现"></a>（1）递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">midorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span>            <span class="token keyword">return</span>         self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）非递归实现-1"><a href="#（2）非递归实现-1" class="headerlink" title="（2）非递归实现"></a>（2）非递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">unrecursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点的栈</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> p <span class="token operator">or</span> stack<span class="token punctuation">:</span>            <span class="token keyword">while</span> p<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left            p <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><h5 id="（1）递归实现-1"><a href="#（1）递归实现-1" class="headerlink" title="（1）递归实现"></a>（1）递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">unrecursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        type root: 树根节点        非递归        """</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            n <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 保存的结果为根右左</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">level</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点的队列</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            root <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 先序遍历 </tag>
            
            <tag> 中序遍历 </tag>
            
            <tag> 后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OneDrive备份电脑上的任意目录</title>
      <link href="/use-onedrive-to-back-up-any-directory-on-your-computer.html"/>
      <url>/use-onedrive-to-back-up-any-directory-on-your-computer.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>当我们使用Onedrive进行电脑文件备份的时候，会发现Onedrive默认在C盘，并且只有桌面、文档和图片三个目录。那么当我们想要对其他盘里的一些目录进行备份，该怎么做呢？接下来便以Windows平台为例记录一下。</p><h3 id="二、利用Onedrive备份电脑上的任意目录"><a href="#二、利用Onedrive备份电脑上的任意目录" class="headerlink" title="二、利用Onedrive备份电脑上的任意目录"></a>二、利用Onedrive备份电脑上的任意目录</h3><p><strong>话不多说，直接进入正文</strong></p><ol><li><p>首先打开Onedrive的目录，默认位于<code>C:\Users\用户名</code>目录下。</p></li><li><p>然后新开一个窗口，进入需要备份的目录。</p></li><li><p>以<code>管理员</code>的身份运行cmd。可以使用搜索功能搜索cmd，然后右键管理员运行。</p></li><li><p>在cmd中使用<code>mklink</code>命令在Onedrive中创建要备份目录的链接。</p><pre><code>mklink /d "C:\Users\18312\OneDrive - arvinhe\视频" “E:\视频”</code></pre><p><strong>说明：</strong></p><ul><li>第一对引号内，填入自己的Onedrive路径</li><li>第二对引号内，填入自己的要备份目录的路径</li><li>以上两个路径最好填入<code>绝对路径</code></li><li><code>\视频</code>表示要备份的目录名，前后引号内要保持一致</li></ul></li><li><p>最后回车执行命令。出现下边的提示，表示执行成功，如果Onedrive在电脑上已经启动的话，文件已经开始备份。</p><pre><code>为 C:\Users\18312\OneDrive - arvinhe\视频 &lt;&lt;===&gt;&gt; E:\视频 创建的符号链接</code></pre></li><li><p><strong>重要提示，如果源目录内的内容被删除，Onedrive链接文件将失效。可以在Onedrive中将备份文件移动到另外一个目录来解决这个问题。</strong></p></li><li><p><strong>如果路径中含有空格，那么路径一定要用英文引号括起来。否则会报命令语法不正确的错误</strong></p></li></ol><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>如果想要了解更多关于<code>mklink</code>命令的详情。<a href="https://blog.walterlv.com/post/ntfs-link-comparisons.html">戳我 戳我 戳我</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Onedrive </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office E5自动订阅</title>
      <link href="/office-e5-automatic-subscription.html"/>
      <url>/office-e5-automatic-subscription.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-摘要"><a href="#一、-摘要" class="headerlink" title="一、 摘要"></a>一、 摘要</h3><p>之前注册的office E5账号，试用期只有三个月，如果想要继续使用呢，那么就需要在账号到期前保持一定的开发活动，简言之就是经常调用微软这些软件的API。下边开始讲如何利用这种方法进行续订。</p><p><strong>重要的事情要多讲几遍：这种方法不保证一定可以续订成功，不保证一定可以续订成功，不保证一定可以续订成功</strong></p><h3 id="二、参考原文"><a href="#二、参考原文" class="headerlink" title="二、参考原文"></a>二、参考原文</h3><ol><li><a href="https://blog.432100.xyz/index.php/archives/50/">黑幕</a> ，这种方式需要用到服务器，成本较大，但是可以学习和借鉴。</li><li><a href="https://github.com/wangziyingwen/AutoApiSecret">https://github.com/wangziyingwen/AutoApiSecret</a>  这个里边的方法也是参考了上边黑幕大佬的内容，然后修改成了采用GitHub Action实现。这样一来，就不在需要服务器这一项了，也降低我这个穷**的生活负担<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8">😞</span></li><li>如果不想看文字步骤的，可以直接跳到最后，<a href="#video">观看视频</a>，本视频由第二个大佬制作。</li></ol><h3 id="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"><a href="#三、具体步骤（自己也记录一下，免得用得着的时候来回翻）" class="headerlink" title="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"></a>三、具体步骤（自己也记录一下，免得用得着的时候来回翻）</h3><p><strong>在往下操作之前，假设你已经有了office E5订阅。</strong></p><h4 id="1-首先前往注册Microsoft-Azure（前往注册）一个应用"><a href="#1-首先前往注册Microsoft-Azure（前往注册）一个应用" class="headerlink" title="1. 首先前往注册Microsoft Azure（前往注册）一个应用"></a>1. 首先前往注册Microsoft Azure（<a href="https://portal.azure.com/#home">前往注册</a>）一个应用</h4><p>这里简述下流程，首先使用E5管理员账号（我自己用的也是管理员，在其他地方又看到不是管理员账号的话可能会失败），登录来到主页以后，按步骤走。</p><ul><li><p>点击主页中的<code>管理Azure Active Directory</code>跳转</p></li><li><p>在左侧目录中找到<code>应用注册</code>，点击</p></li><li><p>点击上方的<code>新注册</code>，这时会跳出一个新建应用的界面。</p></li><li><p>在界面填写信息，名称可以随意写，建议写一个可以标识用途的名字。然后下边选择<code>任何组织目录（任何Azure AD目录-多租户）中的账户</code>。接下来重定向URI选择<code>Web</code>，后边填入<code>http://localhost:53682/</code>，注册。</p></li><li><p>注册以后会跳转到应用概述界面，将界面中的<strong>应用程序（客户端）ID</strong>找个地方复制保存一下，后边要用。然后点击左侧的<strong>API权限</strong>，依次点击<code>添加权限-&gt;Microsoft Graph-&gt;委托的权限</code>,然后将下边的权限勾选： </p><ul><li><code>Files.Read.All</code>、<code>Files.ReadWrite.All</code></li><li><code>Sites.Read.All</code>、<code>Sites.ReadWrite.All</code></li><li><code>User.Read.All</code>、<code> User.ReadWrite.All</code></li><li><code>Directory.Read.Al</code> 、<code>Directory.ReadWrite.All</code></li><li><code>Mail.Read</code> 、<code>Mail.ReadWrite</code></li><li><code>MailboxSettings.Read</code> 、<code>MailboxSettings.ReadWrite</code></li></ul><p>这些权限全部勾选好以后，点击底部的添加权限，这时候会返回到<strong>API权限</strong>界面，然后一定要点<code>代表XXX授予管理员同意</code>。</p></li><li><p>点击左侧目录中的<strong>证书和密码</strong>， 点击<strong>新客户端密码</strong>。说明随意填，年限随意选，然后点击添加。添加好了以后，客户端密码那一行会有一串值，这个值依然需要复制保存，这个是应用秘钥，后边要用。到这里注册就完成了。</p></li></ul><h4 id="2-获取refresh-token"><a href="#2-获取refresh-token" class="headerlink" title="2. 获取refresh token"></a>2. 获取<code>refresh token</code></h4><ul><li><p>下载<strong>rclone</strong>(<a href="https://downloads.rclone.org/v1.52.3/rclone-v1.52.3-windows-amd64.zip">点我下载</a>)，建议复制链接用迅雷下载会更快。下载好了以后解压，<strong>千万不要双击安装</strong>。</p></li><li><p>在解压以后的目录内，<code>shift+鼠标右键</code>， 打开power shell窗口，然后可以执行<code>start cmd</code>命令打开cmd，当然也可以一开始就使用cmd。</p></li><li><p>执行下边的代码：</p><ul><li><pre class="line-numbers language-powershell"><code class="language-powershell">rclone authorize <span class="token string">"onedrive"</span> <span class="token string">"之前保存的应用id"</span> <span class="token string">"之前保存的应用秘钥"</span><span class="token comment" spellcheck="true"># 将双引号内的内容用自己保存的ID和秘钥替换掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>执行以后，浏览器会弹出登录界面，登录自己的E5账号，然后浏览器显示Success，那就说明refresh token生成成功。</p></li><li><p>回到cmd或powershell界面，复制<code>refresh_token</code>的值（可以使用json格式化工具格式化一下，这样比较好找。），<strong>引号不要复制</strong>。</p></li></ul><h4 id="3-GitHub-Action设置"><a href="#3-GitHub-Action设置" class="headerlink" title="3. GitHub Action设置"></a>3. GitHub Action设置</h4><ul><li><p>首先<a href="https://github.com/wangziyingwen/AutoApiSecret">点我</a>，将项目代码fork到自己的GitHub中。接下来都要自己的账号下操作</p></li><li><p>编辑自己项目中的1.txt，删除其中的内容，然后将自己的refresh token粘贴进去。<strong>结尾千万不要留空格或者空行。</strong></p></li><li><p>点击本仓库的<strong>Settings -&gt; Secrets -&gt; new secret</strong>，新建两个secret：CONFIG_ID、CONFIG_KEY：</p><ul><li><p>CONFIG_ID</p><pre><code>id=r'你的应用id'</code></pre></li><li><p>CONFIG_KEY</p><pre><code>secret=r'你的应用秘钥'</code></pre></li></ul></li><li><p>点击右上角头像里边的设置，也就是个人设置，选择<strong>Developer settings -&gt;Personal access tokens -&gt; Generate new token</strong>，设置名字为<code>GITHUB_TOKEN</code>，然后勾选<code>repo</code>、<code>admin:repo_hook</code>、<code>workflow</code>，最后点击Generate token即可。</p></li><li><p>点击<strong>Actions</strong>，同意一下协议，等页面刷新以后，点击一下star，然后观察是否正在启动。如下图所示：</p><p><img src="http://qiniuimg.heyulong.top/GitHub_actions.png"></p></li><li><p>如果是正在转圈的黄色，那代表正在启动。如果是绿色对勾，那就表示已经启动。</p></li><li><p>启动起来以后，点击此action。进入此action页面，然后点击左侧目录中的<code>build</code>，然后在右侧将<code>Test Api</code>展开，便可以看到执行情况。</p></li><li><p>到了第二天，也可以来看一下执行记录。</p></li><li><p>结束</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><span id="video">最后</span></h3><p>这里是此开源Auto API作者录得一个视频，也可以看着视频来操作。</p><iframe src="//player.bilibili.com/player.html?aid=95688306&amp;bvid=BV1mE411V74B&amp;cid=163358877&amp;page=1&amp;high_quality=1&amp;danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400px," width="100%"> </iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
            <tag> E5 </tag>
            
            <tag> 续订 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Microsoft E5账号的1T Onedrive空间升级为5T</title>
      <link href="/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html"/>
      <url>/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、摘要："><a href="#一、摘要：" class="headerlink" title="一、摘要："></a>一、摘要：</h3><p>我们在注册了微软开发者账户以后，通常是会为我们的Onedrive分配5T的可用空间的。但是当我们打开Onedrive以后，看到的却只有1T。这时候，我们该怎么办呢，下边告诉你。</p><h3 id="二、将Onedrive-1T空间恢复到5T"><a href="#二、将Onedrive-1T空间恢复到5T" class="headerlink" title="二、将Onedrive 1T空间恢复到5T"></a>二、将Onedrive 1T空间恢复到5T</h3><h4 id="第一步：在管理后台修改"><a href="#第一步：在管理后台修改" class="headerlink" title="第一步：在管理后台修改"></a>第一步：在管理后台修改</h4><ol><li><p>登录我们的开发者账号（<a href="https://www.office.com/?auth=2">点我登录</a>），进入到如下图所示界面，然后依次点击管理-&gt;所有管理中心，然后在右边界面找到Onedrive，点击。</p><p><img src="http://qiniuimg.heyulong.top/office.png"></p><p><img src="http://qiniuimg.heyulong.top/administrator.png"></p></li><li><p>进入到下图所示界面，点击<code>storage</code> 或者存储，然后修改默认大小保存即可。</p><p><img src="http://qiniuimg.heyulong.top/storage.png"></p></li></ol><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><ol><li><p>下载<code>SharePoint Online Management Shell</code>（<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=35588">点我进入下载页面</a>）,根据自己的系统选择需要下载的版本。下载下来以后安装。安装好以后，在开始菜单最近安装里边会显示这个软件，然后打开。</p></li><li><p>接下来输入下面的代码：</p><pre class="line-numbers language-powershell"><code class="language-powershell">Connect<span class="token operator">-</span>SPOService <span class="token operator">-</span>Url https:<span class="token operator">/</span><span class="token operator">/</span>&lt;orgnam e><span class="token operator">-</span>admin<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：（1）代码中的<code>&lt;orgnam e&gt;</code>是注册账号的组织名字。</p><p>​                  （2）<code>&lt;orgnam e&gt;</code>可以从登录Onedrive以后的页面地址栏中获取。</p><p>​                                例如：我登录后的地址是<code>https://arvinhe-my.sharepoint.com/personal/arvin_arvin_onmicrosoft_com/_layouts/15/onedrive.aspx</code>，其中<code>-my.sharepoint</code>前面的<code>arvinhe</code>便是。</p></li><li><p>执行命令以后，会跳出一个登录界面，输入自己的账户密码登录即可。</p></li><li><p>登录了以后，继续执行下边的命令。</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>SPOSite <span class="token operator">-</span>Identity https:<span class="token operator">/</span><span class="token operator">/</span>arvinhe<span class="token operator">-</span>my<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span class="token operator">/</span>personal<span class="token operator">/</span>arvin_arvin_onmicrosoft_com <span class="token operator">-</span>StorageQuota 5242880<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：其中有两处地方需要改</p><p>（1）<code>-my.sharepoint</code></p><p>（2）<code>arvin_arvin_onmicrosoft_com</code>，其中的<code>@</code>和<code>.</code>都要用<code>_</code>替代的。</p><p>​        这两个地方与你已登录Onedrive（也就是要修改容量的Onedrive）的页面地址栏中的地址的前边大半部分是一样的，照着那个填就行了，参考第2小步给出的我的个人登录后的地址，把自己的填上就好了。</p></li><li><p>执行命令。退出Onedrive客户端，然后重新登陆，可以看到容量已经变了。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> E5 </tag>
            
            <tag> onedrive </tag>
            
            <tag> 扩容 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
