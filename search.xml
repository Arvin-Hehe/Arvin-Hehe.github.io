<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>344. 反转字符串</title>
      <link href="/344-reverse-string.html"/>
      <url>/344-reverse-string.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</strong></p><p><strong>不要给另外的数组分配额外的空间，你必须</strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a>修改输入数组<strong>、使用 O(1) 的额外空间解决这一问题。</strong></p><p><strong>你可以假设数组中的所有字符都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符。</strong></p><p>示例1：</p><pre><code>输入：["h","e","l","l","o"]输出：["o","l","l","e","h"]</code></pre><p>示例2：</p><pre><code>输入：["H","a","n","n","a","h"]输出：["h","a","n","n","a","H"]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><ul><li>创建两个指针<code>m、n</code>，起始位置<code>m</code>指向第一个元素，<code>n</code>指向最后一个元素。</li><li>交换<code>m、n</code>指向的两个元素，然后<code>m+1</code>，<code>n-1</code>。</li></ul><h4 id="2-列表内置函数reverse"><a href="#2-列表内置函数reverse" class="headerlink" title="2. 列表内置函数reverse()"></a>2. 列表内置函数<code>reverse()</code></h4><h4 id="3-切片"><a href="#3-切片" class="headerlink" title="3. 切片"></a>3. 切片</h4><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双指针-1"><a href="#1-双指针-1" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            s<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>m<span class="token punctuation">]</span>            m <span class="token operator">+=</span> <span class="token number">1</span>            n <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-内置函数-reverse"><a href="#2-内置函数-reverse" class="headerlink" title="2. 内置函数 reverse()"></a>2. 内置函数 <code>reverse()</code></h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-切片-1"><a href="#3-切片-1" class="headerlink" title="3. 切片"></a>3. 切片</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify s in-place instead.        """</span>        s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">方法</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1. 双指针</td><td align="center">48ms</td><td align="center">78.20%</td><td align="center">14.3MB</td><td align="center">56.69%</td></tr><tr><td align="center">2. reverse（）</td><td align="center">52ms</td><td align="center">60.86%</td><td align="center">14.3MB</td><td align="center">67.78%</td></tr><tr><td align="center">3. 切片</td><td align="center">52ms</td><td align="center">60.86%</td><td align="center">14.6MB</td><td align="center">7.87%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 简单 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中reverse()和reversed()的用法</title>
      <link href="/usage-of-reverse-and-reversed-in-python.html"/>
      <url>/usage-of-reverse-and-reversed-in-python.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、reverse"><a href="#一、reverse" class="headerlink" title="一、reverse()"></a>一、<a href="https://www.programiz.com/python-programming/methods/list/reverse">reverse()</a></h3><ol><li><p><code>reverse()</code>是Python列表的一个内置方法</p><ul><li><p>不接收任何参数</p></li><li><p>只适用于列表</p></li><li><p>用于列表中元素的反转</p></li><li><p>返回值是<code>None</code>，直接作用于原列表</p></li></ul></li><li><p>示例</p><pre class="line-numbers language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>type<span class="token punctuation">(</span>ls<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><blockquote><p>[3, 2, 1]</p><p>None</p><p>&lt;class ‘NoneType’&gt;</p></blockquote></li></ol><h3 id="二、reversed"><a href="#二、reversed" class="headerlink" title="二、reversed()"></a>二、<a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=reverse#reversed">reversed()</a></h3><ol><li><p><code>reversed()</code>是Python的一个内置方法（就是一个类）<a href="https://docs.python.org/zh-cn/3/library/functions.html?highlight=reverse#reversed">点击查看</a></p><ul><li>接收一个参数<code>seq</code>，seq必须是一个具有<code>__reversed__()</code>方法的对象或者是支持该序列协议（具有从0开始的整数类型参数的<code>__len__()</code>方法和<code>__getitem__()</code>方法）</li><li>适用于列表、元祖、字符串</li><li>反转可迭代序列中的值</li><li>结果返回一个迭代器，可通过遍历、list转化或者next方法获取值。</li></ul></li><li><p>示例</p><ul><li><p>列表</p><pre class="line-numbers language-python"><code class="language-python">ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>[3, 2, 1]</p></blockquote></li><li><p>元组</p><pre class="line-numbers language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>(3, 2, 1)</p></blockquote></li><li><p>字符串</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>&lt;reversed object at 0xxxxxxxxx&gt;</p><p>dcba</p></blockquote></li></ul></li><li><p>注意</p><ul><li><p>对字典使用<code>reversed()</code>，得到错误<code>TypeError: 'dict' object is not reversible</code></p></li><li><p>对集合使用，错误<code>TypeError: 'set' object is not reversible</code></p></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 内置方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. 四数之和</title>
      <link href="/18-sum-of-four-numbers.html"/>
      <url>/18-sum-of-four-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个包含n个整数的数组<code>nums</code>和一个目标值<code>target</code>，判断<code>nums</code>中是否存在四个元素 a, b, c 和 d，使得 a+b+c+d 的值与<code>target</code>想等？找出所有满足条件且不重复的四元组。</strong></p><p><strong>注意：</strong></p><p><strong>答案中不可以包含重复的四元组。</strong></p><p>示例：</p><pre><code>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。满足要求的四元组集合为：[  [-1,  0, 0, 1],  [-2, -1, 1, 2],  [-2,  0, 0, 2]]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><p>参考LeetCode中<a href="https://leetcode-cn.com/problems/4sum/solution/shuang-zhi-zhen-gao-su-jie-fa-by-ml-zimingmeng/">腐烂的橘子</a>的题解</p><ul><li><p>因为结果中不能包含重复的四元组，所以可以先对数组进行递增排序，方便后边去重。</p></li><li><p>采用三层循环，依次创建四个指针<code>i、j、k、m</code></p></li><li><p>三层循环会大幅增加时间开销，所以可以在循环中进行条件判断，避免无用循环。</p><ul><li>比如最外层循环内可以加上判断条件：<code>nums[i] + 3 * nums[i+1] &gt; target</code>，因为<code>nums</code>为递增排序，所以再往后运算的数值也必定大于<code>target</code>，所以此处可以直接<code>break</code>。</li><li>接下来对条件<code>nums[i] + 3 * num[-1] &lt; target</code>判断，此时<code>nums[i]</code>加上任意其他的三个数也一定小于<code>target</code>，所以此处可以直接进行下次循环了。<ul><li>此处下一个数进行判断，如果<code>nums[i] == nums[i+1]</code>，执行<code>i += 1</code>，以此来达到去重的效果。</li></ul></li></ul></li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双指针-1"><a href="#1-双指针-1" class="headerlink" title="1. 双指针"></a>1. 双指针</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一层循环，选择第一个数，后边还有三个数，所以要减去3</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                 <span class="token keyword">break</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token number">-4</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 去重</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 此处指针指向的数与下一个数不相同，但是与前一个数还是相同的，所以要加1</span>                <span class="token keyword">continue</span>            diff1 <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> diff1<span class="token punctuation">:</span>                     <span class="token keyword">break</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> diff1<span class="token punctuation">:</span>                    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        j <span class="token operator">+=</span> <span class="token number">1</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">continue</span>                diff2 <span class="token operator">=</span> diff1 <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                m <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># 同时对后两个数判断</span>                <span class="token keyword">while</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> diff2<span class="token punctuation">:</span>                         k <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> diff2<span class="token punctuation">:</span>                         m <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        k <span class="token operator">+=</span> <span class="token number">1</span>                        m <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">and</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 去重</span>                            k <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>                             m <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">while</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">执行用时</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">91.96%</td><td align="center">13.5MB</td><td align="center">12.78%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/5-the-longest-palindrome-substring.html"/>
      <url>/5-the-longest-palindrome-substring.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个字符串<code>s</code>，找到<code>s</code>中最长的回文子串。你可以假设<code>s</code>的最大长度为1000。</strong></p><p>示例1：</p><pre><code>输入: "babad"输出: "bab"注意: "aba" 也是一个有效答案。</code></pre><p>示例2：</p><pre><code>输入: "cbbd"输出: "bb"</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-双层循环"><a href="#1-双层循环" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><ul><li>第一层循环控制元素遍历起始位置</li><li>第二层循环控制遍历后边的元素</li><li>把内层循环的元素累加到一个变量 cur 上，每累加一个就判断当前子串cur是否为回文串，并且长度是否大于前边保存的回文子串，条件成立，则对结果更新。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-双层循环-1"><a href="#1-双层循环-1" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if length == 0 or length == 1:</span>        <span class="token comment" spellcheck="true">#    return s</span>        ans <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">+=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> cur <span class="token operator">==</span> cur<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">></span> len<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">:</span>                    ans <span class="token operator">=</span> cur        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><h4 id="1-双层循环-2"><a href="#1-双层循环-2" class="headerlink" title="1. 双层循环"></a>1. 双层循环</h4><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">8176ms</td><td align="center">5.01%</td><td align="center">13.1MB</td><td align="center">97.83%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 双层循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitee创建自己的图床</title>
      <link href="/use-gitee-to-create-your-own-image-bed.html"/>
      <url>/use-gitee-to-create-your-own-image-bed.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>平时写点东西都会配个图，使用的七牛云做图床。突然有一天，打开谷歌浏览器，打开博客页，发现图片全加载不出来了。开始还以为是网速不好，又刷新了两遍结果还是不行。然后使用edge等等其他浏览器却都没问题。F12以后，看到ERR_SSL_VERSION_OR_CIPHER_MISMATCH错误，并且图片的HTTP协议全部自动变成了HTTPS的，然后就谷歌了一下，发现是谷歌的问题。只要域名为HTTPS的情况下，页面内的所有HTTP都会转换为HTTPS。</p><p>好吧，目前来说已经知道问题所在了，那就该就决问题了。</p><h3 id="二、解决问题"><a href="#二、解决问题" class="headerlink" title="二、解决问题"></a>二、解决问题</h3><p>实际上这个问题很好解决，只需要到<a href="https://portal.qiniu.com/cdn/domain">七牛云</a>的CDN域名管理页面，配置相应域名，开启HTTPS即可。</p><p>可是一旦开启HTTPS以后，通过HTTPS的流量将不计算入免费流量，那以后再使用的话就需要交流量费了，对于一个资深白嫖用户来说，真的太难受了。然后就开始了谷歌之路。</p><p>在一通谷歌加测试以后，那些方法全没用。</p><p>最后，在舍不得一点流量费的情况下，温柔地打开了gitee。<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">PicGo</a> + gitee组合，将码云作为图床使用。</p><p>注意：在创建图床仓库时，要选择<code>公开</code>模式，否则图片无法访问。</p><h3 id="三、gitee-PicGo-创建自己的图床"><a href="#三、gitee-PicGo-创建自己的图床" class="headerlink" title="三、gitee + PicGo 创建自己的图床"></a>三、gitee + PicGo 创建自己的图床</h3><ol><li>创建一个新的仓库，选择<code>公开</code>模式，其他的选项照常选择</li><li>下载<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">PicGo</a>，然后安装</li><li>打开PicGo，选择插件设置，搜索 gitee，然后任选一个gitee插件下载。下载完以后，可以看到图床设置中已经有了gitee图床。</li><li>选择gitee图床，然后在右边的gitee图床设置界面填写必要信息。<ul><li>owner：填写自己的用户名</li><li>repo：仓库名</li><li>path：在仓库中图片保存的目录路径，可以不填，默认为根目录</li><li>token：在gitee用户设置中，选择<code>Personal access tokens</code>，然后点击右边的<code>Generate new token</code>生成新的token。然后复制粘贴进来即可。</li><li>message： commit 时的信息，保持默认即可。</li></ul></li><li>点击确定即可。可以将其设置为默认图床，这样一来在上传图片的时候就不用再选择图床了</li><li>回到上传区。右边上传区上边可以选择图床，中间为上传区域，下边可以选择生成的链接格式。</li><li>选择一张图片上传，完成后，生成的链接已经保存在剪切板，直接在需要的地方粘贴即可。</li><li>结束</li></ol><p><strong>注意：图片过大的话会导致无法加载出来，推荐使用<code>小于1MB</code>的图片。再大就会出现加载不出来的情况。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> gitee </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> 图床 </tag>
            
            <tag> ssl </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>235. 二叉搜索树的最近公共祖先</title>
      <link href="/235-the-nearest-common-ancestor-of-binary-search-tree.html"/>
      <url>/235-the-nearest-common-ancestor-of-binary-search-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</strong></p><p>百度百科<strong>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”**</strong></p><p><strong>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png"></p><p>示例1：</p><pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6 解释: 节点 2 和节点 8 的最近公共祖先是 6。</code></pre><p>示例2：</p><pre><code>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</code></pre><p><strong>说明：</strong></p><ul><li>所有节点的值都是唯一的。</li><li>p、q为不同节点且均存在于给定的二叉搜索树中。</li></ul><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>对于搜索二叉树，整体节点值的大小为<code>右子树 &gt; 根 &gt; 左子树</code>，所以大概思路就如下边所述：</p><ul><li>用根节点的大小与p、q比较</li><li>如果 root 节点值大于p、q，那么 说明p、q位于二叉搜索树的左子树，所以<code>root = root.left</code>，继续比较</li><li>如果root节点值小于p、q，那么说明q、p位于二叉搜索树的右子树，然后对root重新赋值<code>root = root.right</code>。</li><li>如果root节点的值大于p、q其中的一个、小于另外一个（包括剩余的其他情况下），那么说明root节点位于p、q节点的中间。</li><li>将root返回</li></ul><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token string">'TreeNode'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'TreeNode'</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> root<span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val <span class="token operator">and</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            <span class="token keyword">elif</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">and</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-表现"><a href="#3-表现" class="headerlink" title="3. 表现"></a>3. 表现</h4><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">84ms</td><td align="center">98.60%</td><td align="center">17.3MB</td><td align="center">73.69%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>501. 二叉搜索树中的众数</title>
      <link href="/501-mode-in-binary-search-tree.html"/>
      <url>/501-mode-in-binary-search-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</strong></p><p><strong>假定 BST 有如下定义：</strong></p><ul><li>结点左子树中所含结点的值小于等于当前结点的值</li><li>结点右子树中所含结点的值大于等于当前结点的值</li><li>左子树和右子树都是二叉搜索树</li></ul><p>例如：</p><p>给定BST<code>[1, null, 2, 2]</code>,</p><pre><code>     1     \      2     /    2</code></pre><p><code>返回[2]</code>。</p><p><strong>提示：如果众数超过1个，不需考虑输出顺序</strong></p><p><strong>进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</strong></p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>搜索二叉树进行中序遍历，得到的结果是<code>有序</code>的，所以结果中的相同的数是连续出现的，只需要统计 出现的次数，然后比较找到出现次数最多的一个或多个数保存返回即可。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 当当前节点值与前一个不一样时，对保存的数值与出现的次数进行更新</span>        <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal result            <span class="token keyword">if</span> sums <span class="token operator">></span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cur<span class="token punctuation">]</span>                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sums            <span class="token keyword">elif</span> sums <span class="token operator">==</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal sums<span class="token punctuation">,</span> cur            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">:</span>                    sums <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    update<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span>                    cur <span class="token operator">=</span> root<span class="token punctuation">.</span>val                    sums <span class="token operator">=</span> <span class="token number">0</span>                    sums <span class="token operator">+=</span> <span class="token number">1</span>                inOrder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第一个数组元素负责保存出现的一个或多个出现次数一样的众数；</span>        <span class="token comment" spellcheck="true"># 第二个元素是出现的次数</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 统计每个数出现的次数</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 当前的数</span>        cur <span class="token operator">=</span> <span class="token string">''</span>        inOrder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 特殊情况：最后连续多个数都一样，在递归中没有被统计进去</span>        update<span class="token punctuation">(</span>cur<span class="token punctuation">,</span> sums<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">104ms</td><td align="center">8.63%</td><td align="center">17.2MB</td><td align="center">67.22%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 无重复字符的最长子串</title>
      <link href="/3-the-longest-substring-without-repeated-characters.html"/>
      <url>/3-the-longest-substring-without-repeated-characters.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个字符串，请你找出其中不含有重复字符的<code>最长子串</code>的长度。</strong></p><p>示例1：</p><pre><code>输入: "abcabcbb"输出: 3 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</code></pre><p>示例2：</p><pre><code>输入: "bbbbb"输出: 1解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</code></pre><p>示例3：</p><pre><code>输入: "pwwkew"输出: 3解释: 因为无重复字符的最长子串是&nbsp;"wke"，所以其长度为 3。&nbsp;    请注意，你的答案必须是 子串 的长度，"pwke"&nbsp;是一个子序列，不是子串。</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>使用两个for循环，外层循环控制起始位置，内层循环从起始元素开始，将未重复元素添加到一个临时数组，遇到重复元素就退出循环。将临时数组的长度也就是子串的长度添加到一个数组。最后比较数组内所有元素的最大值便是最长子串的长度。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 默认子串长度为0</span>        <span class="token comment" spellcheck="true"># 1 使用常数统计最长子串长度</span>        <span class="token comment" spellcheck="true"># result = 0</span>        <span class="token comment" spellcheck="true"># 2 使用数组统计所有子串长度</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> cur<span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#if len(cur) > result:</span>            <span class="token comment" spellcheck="true">#    result = len(cur)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#return result</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-表现"><a href="#3-表现" class="headerlink" title="3. 表现"></a>3. 表现</h4><table><thead><tr><th align="center">记录方式</th><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2168ms</td><td align="center">4%</td><td align="center">13.4MB</td><td align="center">32%</td></tr><tr><td align="center">2</td><td align="center">2164ms</td><td align="center">5.01%</td><td align="center">13.3MB</td><td align="center">84.95%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 两数相加</title>
      <link href="/2-add-two-numbers.html"/>
      <url>/2-add-two-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给出两个<code>非空</code> 的链表用来表示两个<code>非负</code>的整数。其中，它们各自的位数是按照 <code>逆序</code>的方式存储的，并且它们的每个节点只能存储<code>一位</code> 数字。</strong></p><p><strong>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</strong></p><p><strong>您可以假设除了数字0之外，这两个数都不会以0开头。</strong></p><p>示例：</p><pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><p>没什么特殊方法，一个一个遍历。</p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ListNode<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建链表头结点</span>        new_list <span class="token operator">=</span> cur <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> l1 <span class="token operator">or</span> l2 <span class="token operator">or</span> sums<span class="token punctuation">:</span>            sums <span class="token operator">+=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token keyword">if</span> l1 <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token keyword">if</span> l2 <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>None<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            sums<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val <span class="token operator">=</span> divmod<span class="token punctuation">(</span>sums<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next <span class="token keyword">if</span> l1 <span class="token keyword">else</span> None            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next <span class="token keyword">if</span> l2 <span class="token keyword">else</span> None         <span class="token keyword">return</span> new_list<span class="token punctuation">.</span>next<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、表现"><a href="#三、表现" class="headerlink" title="三、表现"></a>三、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">20.49%</td><td align="center">13.3MB</td><td align="center">74.92%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 链表 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>617. 合并二叉树</title>
      <link href="/617-merging-binary-trees.html"/>
      <url>/617-merging-binary-trees.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</strong></p><p><strong>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</strong></p><p>示例 1:</p><pre><code>输入:     Tree 1                     Tree 2                            1                         2                                      / \                       / \                                    3   2                     1   3                               /                           \   \                            5                             4   7                  输出: 合并后的树:         3        / \       4   5      / \   \      5   4   7来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/merge-two-binary-trees著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><p><strong>注意: 合并必须从两个树的根节点开始。</strong></p><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="（1）思路描述"><a href="#（1）思路描述" class="headerlink" title="（1）思路描述"></a>（1）思路描述</h4><ul><li>首先我选择使用层次遍历的方式来写这道题。</li><li>其次是将 Tree2 合并到 Tree1 上边，作为一颗新的二叉树返回</li><li>方向确定了，接下来就是程序实现的设计了</li><li>首先判断传入函数的 t1 、t2是否为None，t1为None返回t2，t2为None返回t1，都为None返回None。t1和t2都不为None，接着往下走</li><li>定义两个队列<code>dequeue1</code>保存Tree1的层次遍历节点，<code>dequeue2</code>保存Tree2的遍历节点。首先将t1、t2分别添加到dequeue1和dequeue2</li><li>接着循环遍历往下走：<ul><li>进入循环首先实现根节点的值的更新</li><li>接下来每一次遍历对节点左右子树进行判断<ul><li>t1和t2左右子树都存在，则分别添加到队列中</li><li>如果t1的左子树或右子树存在，t2的左子树或右子树不存在。这时是不需要做任何操作的</li><li>如果t2的左子树或右子树存在，t1的左子树或右子树不存在。那么需要将t2的左子树或者右子树添加到t1的</li></ul></li></ul></li><li>最后返回t1即可。</li></ul><h4 id="（2）代码实现"><a href="#（2）代码实现" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t1<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> t2<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''层次遍历'''</span>        <span class="token comment" spellcheck="true"># 1、首先对t1和t2进行判断</span>        <span class="token keyword">if</span> t1 <span class="token operator">and</span> <span class="token operator">not</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span> t1        <span class="token keyword">elif</span> <span class="token operator">not</span> t1 <span class="token operator">and</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span> t2        <span class="token keyword">elif</span> <span class="token operator">not</span> t1 <span class="token operator">and</span> <span class="token operator">not</span> t2<span class="token punctuation">:</span>            <span class="token keyword">return</span>         <span class="token comment" spellcheck="true"># 2、定义队列保存遍历节点</span>        dequeue1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dequeue2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>        dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>        <span class="token keyword">while</span> dequeue1 <span class="token operator">and</span> dequeue2<span class="token punctuation">:</span>            d1 <span class="token operator">=</span> dequeue1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            d2 <span class="token operator">=</span> dequeue2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对根的值进行更新</span>            d1<span class="token punctuation">.</span>val <span class="token operator">=</span> d1<span class="token punctuation">.</span>val <span class="token operator">+</span> d2<span class="token punctuation">.</span>val            <span class="token comment" spellcheck="true"># 左右子树判断</span>            <span class="token keyword">if</span> d1<span class="token punctuation">.</span>left <span class="token operator">and</span> d2<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">elif</span> d2<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                d1<span class="token punctuation">.</span>left <span class="token operator">=</span> d2<span class="token punctuation">.</span>left            <span class="token keyword">if</span> d1<span class="token punctuation">.</span>right <span class="token operator">and</span> d2<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                dequeue1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                dequeue2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">elif</span> d2<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                d1<span class="token punctuation">.</span>right <span class="token operator">=</span> d2<span class="token punctuation">.</span>right         <span class="token keyword">return</span> t1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）表现"><a href="#（3）表现" class="headerlink" title="（3）表现"></a>（3）表现</h4><table><thead><tr><th align="center">运行时间</th><th align="center">表现</th><th align="center">内存消耗</th><th align="center">表现</th></tr></thead><tbody><tr><td align="center">100ms</td><td align="center">91.61%</td><td align="center">14.3MB</td><td align="center">88.39%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>538. 把二叉搜索树转换为累加树</title>
      <link href="/538-convert-binary-search-tree-to-accumulative.html"/>
      <url>/538-convert-binary-search-tree-to-accumulative.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree），使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</strong></p><p>例如：</p><pre><code>输入: 原始二叉搜索树:              5            /   \           2     13输出: 转换为累加树:             18            /   \          20     13来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/convert-bst-to-greater-tree著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ul><li>因为是二叉搜索树，所以节点值的大小顺序为<code>左 &lt; 根 &lt; 右</code></li><li>大小顺序像极了中序遍历<code>2 5 13</code></li><li>就以题目中的二叉搜索树为例，右子树的值13不变，根的值等于5+13=18。左子树节点的值为13+5+2=20，更进一步就是18+2=20。</li><li>所以中序遍历逆向依次累加，便是结果。</li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''中序遍历，逆序'''</span>        <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            nonlocal sums            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                recursion<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                sums <span class="token operator">+=</span> root<span class="token punctuation">.</span>val                root<span class="token punctuation">.</span>val <span class="token operator">=</span> sums                recursion<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        sums <span class="token operator">=</span> <span class="token number">0</span>        recursion<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、表现"><a href="#四、表现" class="headerlink" title="四、表现"></a>四、表现</h3><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">88ms</td><td align="center">37.41%</td><td align="center">15.5MB</td><td align="center">47.41%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78. 子集</title>
      <link href="/78-subset.html"/>
      <url>/78-subset.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一组<code>不含重复元素</code>的整数数组 nums，返回该数组所有可能的子集（幂集）。</strong></p><p><strong>说明：解集不能包含重复的子集。</strong></p><p><strong>示例：</strong></p><pre><code>输入：nums = [1, 2, 3]输出：[  [3],&nbsp; [1],&nbsp; [2],&nbsp; [1,2,3],&nbsp; [1,3],&nbsp; [2,3],&nbsp; [1,2],&nbsp; []]</code></pre><h3 id="二、思路-amp-代码实现"><a href="#二、思路-amp-代码实现" class="headerlink" title="二、思路 &amp; 代码实现"></a>二、思路 &amp; 代码实现</h3><h4 id="1-利用-Python-的-itertools-库的-combinations函数"><a href="#1-利用-Python-的-itertools-库的-combinations函数" class="headerlink" title="1. 利用 Python 的 itertools 库的 combinations函数"></a>1. 利用 Python 的 <code>itertools</code> 库的 <code>combinations</code>函数</h4><h5 id="（1）描述"><a href="#（1）描述" class="headerlink" title="（1）描述"></a>（1）描述</h5><p><code>itertools</code> — 为高效循环而创建迭代器的函数（Python文档中的描述）</p><p>本模块实现一系列 iterator ，这些迭代器受到APL，Haskell和SML的启发。为了适用于Python，它们都被重新写过。本模块标准化了一个快速、高效利用内存的核心工具集，这些工具本身或组合都很有用。它们一起形成了“迭代器代数”，这使得在纯Python中有可能创建简洁又高效的专用工具。（<a href="https://docs.python.org/zh-cn/3/library/itertools.html">Python文档描述</a>）</p><p><a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.combinations"><code>combinations</code>函数的使用</a></p><p><code>itertools.combinations(iterable, n)</code></p><blockquote><p>结果返回由可迭代对象 iterable 中的元素组成的长度为 n 的子序列（每个子序列都是元组的形式；当 n 大于 iterable 序列的长度时，返回的子序列与 iterable 一样）</p><p>返回的结果是按照 iterable 的顺序发出的，如果 iterable 有序，则结果按照已排序的顺序发出。</p><p>如果 iterable 中有重复的元素，但是不同位置的元素依然会被认为是不同的。</p></blockquote><h5 id="（2）代码实现"><a href="#（2）代码实现" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinations<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># 保存结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 因为iterable的子集也包括它本身，所以要+1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> num <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现"><a href="#（3）表现" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">16ms</td><td align="center">88.56%</td><td align="center">12.8MB</td><td align="center">6.60%</td></tr></tbody></table><h4 id="2-递归（回溯）"><a href="#2-递归（回溯）" class="headerlink" title="2. 递归（回溯）"></a>2. 递归（回溯）</h4><h5 id="（1）描述-1"><a href="#（1）描述-1" class="headerlink" title="（1）描述"></a>（1）描述</h5><img src="https://pic.leetcode-cn.com/1600597534-AVwJtB-file_1600597536187" alt="参考LeetCode题解中 大梦三千秋 的题解" style="zoom: 80%;"><ul><li><p>对树结构进行遍历的话，顺序为</p><p><code>[[], </code></p><p><code>[1], [1, 2], [1, 2, 3], </code></p><p><code>[1, 3],</code></p><p><code>[2], [2, 3], </code></p><p><code>[3]]</code></p></li><li><p>因为解集中包含空集，所以可以在进入递归之前先把子集添加到解集中</p></li><li><p>元素个数又是有限的，可以不设置递归终止条件</p></li><li><p>对结果分析，大概的逻辑就是（定义一个数组<code>ans</code>临时保存子集，数组<code>result</code>保存结果子集）：</p><ul><li>进入递归函数内，首先把 ans数组内的 子集保存到数组result中</li><li>遍历数组nums第一个元素 1，将元素 1 添加到 ans 中，进入递归，以下一个下标为1的元素 2 作为递归起点；进入递归函数首先将 ans 中子集 [1] 添加到 result 中，然后将元素 2 添加到 ans 中，递归。将下一个下标为2的元素 3 的作为递归起点；将 ans 子集 [1，2] 添加到result。将元素 3 添加到ans中 ，将下标3传入进入下一次递归；将子集[1, 2, 3]添加到result中。这时已经不满足遍历条件，此次递归结束，返回元素3的递归中。</li><li>在元素3的递归这一层接下来回溯，将ans最后一个元素也就是3删除。然后返回元素2的这层递归，此时ans为[1, 2]，接下来依然是回溯，删除元素2,。数组nums的遍历继续，接下来轮到元素3，然后将元素3添加到ans，此时ans为[1, 3]，然后进入递归。接下来的操作就与前边的基本一致。</li><li>到了这里，程序的基本架构就已经出来了。下边写代码。</li></ul></li></ul><h5 id="（2）代码实现-1"><a href="#（2）代码实现-1" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true"># 1、定义解集、子集的数组</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 递归函数 </span>        <span class="token keyword">def</span> <span class="token function">sets</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将子集保存到解集中</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 遍历数组nums</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 递归</span>                sets<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            sets<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-1"><a href="#（3）表现-1" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">16ms</td><td align="center">88.48%</td><td align="center">12.6MB</td><td align="center">49.16%</td></tr></tbody></table><h4 id="3-位运算"><a href="#3-位运算" class="headerlink" title="3. 位运算"></a>3. 位运算</h4><h5 id="（1）描述-2"><a href="#（1）描述-2" class="headerlink" title="（1）描述"></a>（1）描述</h5><p>直接上图：</p><table><thead><tr><th align="center">0/1序列</th><th align="center">子集</th><th align="center">0/1序列对应的二进制数</th></tr></thead><tbody><tr><td align="center">000</td><td align="center">[]</td><td align="center">0</td></tr><tr><td align="center">001</td><td align="center">[3]</td><td align="center">1</td></tr><tr><td align="center">010</td><td align="center">[2]</td><td align="center">2</td></tr><tr><td align="center">011</td><td align="center">[2,3]</td><td align="center">3</td></tr><tr><td align="center">100</td><td align="center">[1]</td><td align="center">4</td></tr><tr><td align="center">101</td><td align="center">[1,3]</td><td align="center">5</td></tr><tr><td align="center">110</td><td align="center">[1,2]</td><td align="center">6</td></tr><tr><td align="center">111</td><td align="center">[1,2,3]</td><td align="center">7</td></tr></tbody></table><p>0 表示不在当前对应位置的元素不在子集中；1 表示在子集中。</p><h5 id="（2）代码实现-2"><a href="#（2）代码实现-2" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> length        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">>></span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-2"><a href="#（3）表现-2" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">44ms</td><td align="center">49.72%</td><td align="center">13.2MB</td><td align="center">98.84%</td></tr></tbody></table><h4 id="4-迭代（在题解中发现的一种方法）"><a href="#4-迭代（在题解中发现的一种方法）" class="headerlink" title="4. 迭代（在题解中发现的一种方法）"></a>4. 迭代（在题解中发现的一种方法）</h4><h5 id="（1）描述-3"><a href="#（1）描述-3" class="headerlink" title="（1）描述"></a>（1）描述</h5><p>以示例中的[1, 2, 3]为例：</p><p>子集结果为：[[], [1], [1, 2], [1, 3], [2], [2, 3], [3], [1, 2, 3]]</p><p><strong>分析：</strong>（下边分析 = 表示等号，不代表赋值）</p><ul><li>[] + [1] = [1]，同理可得[2]，[3]</li><li>如果设子集初始为[[]]，然后[] 与 [1] 相加，将结果 [1] 添加到子集数组中得到 [[], [1]]</li><li>然后用子集 [[], [1]] 中的元素分别与 [2] 相加得到 [2]、[1, 2]，然后将结果再添加到子集中，结果为 [[], [1], [2], [1, 2]]。往下 [3] 类推….</li><li>最后可得出完整的子集数组</li></ul><h5 id="（2）代码实现-3"><a href="#（2）代码实现-3" class="headerlink" title="（2）代码实现"></a>（2）代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> num <span class="token keyword">for</span> num <span class="token keyword">in</span> result<span class="token punctuation">]</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）表现-3"><a href="#（3）表现-3" class="headerlink" title="（3）表现"></a>（3）表现</h5><table><thead><tr><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">24ms</td><td align="center">39.88%</td><td align="center">12.6MB</td><td align="center">33.01%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 两数之和</title>
      <link href="/1-the-sum-of-two-numbers.html"/>
      <url>/1-the-sum-of-two-numbers.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>,请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</strong></p><p><strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</strong></p><p>示例：</p><pre><code>给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><h4 id="1-第一种思路"><a href="#1-第一种思路" class="headerlink" title="1. 第一种思路"></a>1. 第一种思路</h4><p>这种方法比较粗暴并且很笨了。首先用目标值减去数组中的第一个（下标为0）的元素，然后判断差值是否在数组剩余元素num[1:]中。如果在，得到结果；如果不在，然后再用目标值减去第二个元素，判断差值是否在数组num[2：]…..。就这样直至得到结果。</p><h4 id="2-第二种思路"><a href="#2-第二种思路" class="headerlink" title="2. 第二种思路"></a>2. 第二种思路</h4><p>利用哈希表，数组中的元素的值与对应的下标作为键值映射。然后用目标值依次与数组中的元素做差，然后差值作键在哈希表中获取对应的下标，返回最终结果。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1-第一种思路-1"><a href="#1-第一种思路-1" class="headerlink" title="1. 第一种思路"></a>1. 第一种思路</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> diff <span class="token keyword">in</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 获取第二个数在切片数组中的下标</span>                index <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 下边用try...except写的</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 不再用if判断diff是否在数组中</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 获取第二个数在切片数组中的下标</span>                index <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>diff<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-第二种思路-1"><a href="#2-第二种思路-1" class="headerlink" title="2. 第二种思路"></a>2. 第二种思路</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        hashmap <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>hashmap<span class="token punctuation">.</span>get<span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                hashmap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、结果"><a href="#四、结果" class="headerlink" title="四、结果"></a>四、结果</h3><table><thead><tr><th align="center">方法</th><th align="center">运行时间</th><th align="center">击败</th><th align="center">内存消耗</th><th align="center">击败</th></tr></thead><tbody><tr><td align="center">第一种：if…in..</td><td align="center">680ms</td><td align="center">49%</td><td align="center">13.1MB</td><td align="center">79%</td></tr><tr><td align="center">第一种：try…except…</td><td align="center">752ms</td><td align="center">49.54%</td><td align="center">13.1MB</td><td align="center">90.42%（疑惑）</td></tr><tr><td align="center">第二种</td><td align="center">16ms</td><td align="center">99.20%</td><td align="center">13.5MB</td><td align="center">31.53%</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 数组 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>404. 左叶子之和</title>
      <link href="/404-sum-of-left-leaves.html"/>
      <url>/404-sum-of-left-leaves.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>计算给定二叉树的所有左叶子之和</strong></p><p>示例：</p><pre><code>    3   / \  9  20    /  \   15   7在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</code></pre><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ul><li><p>看到题目中的<code>二叉树</code>时，首先想到要用深度优先遍历或者广度优先遍历</p></li><li><p>接下来往下看<code>左叶子之和</code>，然后就想到了先序遍历、中序遍历、后序遍历。</p></li><li><p>题目中要求只计算左叶子之和，所以就考虑使用这三种遍历的非递归方式</p><p><strong>所以最后，还是选择使用的后序遍历的非递归实现</strong></p></li></ul><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="1、先序遍历"><a href="#1、先序遍历" class="headerlink" title="1、先序遍历"></a>1、先序遍历</h4><p>后续补上</p><h4 id="2、中序遍历"><a href="#2、中序遍历" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h4><p>后续补上</p><h4 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 首先判断root如果为None，返回值为0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 保存左叶子节点的值</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 临时保存节点的栈</span>            stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            <span class="token keyword">while</span> stack<span class="token punctuation">:</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 左子树节点为叶子结点</span>                    <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">and</span> <span class="token operator">not</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                 <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>             <span class="token keyword">return</span> sum<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、结果"><a href="#四、结果" class="headerlink" title="四、结果"></a>四、结果</h3><h4 id="1、先序遍历-1"><a href="#1、先序遍历-1" class="headerlink" title="1、先序遍历"></a>1、先序遍历</h4><h4 id="2、中序遍历-1"><a href="#2、中序遍历-1" class="headerlink" title="2、中序遍历"></a>2、中序遍历</h4><h4 id="3、后序遍历-1"><a href="#3、后序遍历-1" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><table><thead><tr><th align="center"></th><th align="center">运行时间</th><th align="center"></th><th align="center">内存消耗</th><th align="center"></th></tr></thead><tbody><tr><td align="center">第一次</td><td align="center">28ms</td><td align="center">超过18%</td><td align="center">12.7MB</td><td align="center">超过93%</td></tr><tr><td align="center">第二次</td><td align="center">20ms</td><td align="center">超过70%</td><td align="center">12.8MB</td><td align="center">超过80%</td></tr></tbody></table><p>接下来，学习学习别人的思路，再接着优化吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> python </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写python脚本实现自动更新码云pages</title>
      <link href="/write-python-script-to-automatically-update-code-cloud-pages.html"/>
      <url>/write-python-script-to-automatically-update-code-cloud-pages.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>使用码云的pages部署hexo静态博客以后，每次写完都要去手动更新，实在是麻烦。当然只要开会员，这个问题根本不叫问题。但是，对于一个自身白嫖党而言，不可能的，这辈子也不可能的。</p><p>所以，只能自力更生、艰苦奋斗了。</p><h3 id="二、想法"><a href="#二、想法" class="headerlink" title="二、想法"></a>二、想法</h3><p>利用<strong>selenium</strong>编写python脚本，实现模拟登录更新，这样就不用了每次都自己登录码云，然后手动更新了。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token comment" spellcheck="true"># 基本信息</span>username <span class="token operator">=</span> <span class="token string">'xxxx'</span>  <span class="token comment" spellcheck="true"># 账号</span>password <span class="token operator">=</span> <span class="token string">'xxxx'</span>     <span class="token comment" spellcheck="true"># 密码</span>pickname <span class="token operator">=</span> <span class="token string">'xxxx'</span>   <span class="token comment" spellcheck="true"># 用户名</span>repo <span class="token operator">=</span> <span class="token string">'xxxx'</span>       <span class="token comment" spellcheck="true"># 仓库名</span>driver <span class="token operator">=</span> r<span class="token string">'D:\Desktop\chromedriver.exe'</span>     <span class="token comment" spellcheck="true"># 谷歌驱动的路径</span>options <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 不显示界面</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--start-maximized"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 窗口最大化</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--disable-plugins"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 禁止扩展</span>chrome <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span>driver<span class="token punctuation">,</span> options<span class="token operator">=</span>options<span class="token punctuation">)</span>chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://gitee.com/login'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输入用户名、密码，登录</span>username_input <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"user_login"</span><span class="token punctuation">)</span>password_input<span class="token operator">=</span>  chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"user_password"</span><span class="token punctuation">)</span>login_btn <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"commit"</span><span class="token punctuation">)</span>username_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>username<span class="token punctuation">)</span>password_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>password<span class="token punctuation">)</span>login_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待页面加载完成</span>WebDriverWait<span class="token punctuation">(</span>chrome<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_all_elements_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"ml-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 跳转到page页面</span>chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://gitee.com/'</span> <span class="token operator">+</span> pickname <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> repo <span class="token operator">+</span> <span class="token string">'/pages'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待页面加载完成</span>WebDriverWait<span class="token punctuation">(</span>chrome<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_all_elements_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">"update_deploy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行js代码，使页面向下滚动</span>chrome<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.scrollTo(100, document.body.scrollHeight);"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击更新按钮</span>update_btn <span class="token operator">=</span> chrome<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">"update_deploy"</span><span class="token punctuation">)</span>update_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 点击确认框</span>alert <span class="token operator">=</span> chrome<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>alertalert<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gitee pages 更新成功'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chrome<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、后续目标"><a href="#四、后续目标" class="headerlink" title="四、后续目标"></a>四、后续目标</h3><p>目前基本目标已经可以实现，不过每次还需要手动执行脚本，拉胯<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span>。所以，接下来试着将脚本放到GitHub action上边去，实时监控码云仓库变化，实现实时更新。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
            <tag> 码云 </tag>
            
            <tag> pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode中配置代码静态检查工具pylint</title>
      <link href="/configure-code-static-checking-tool-pylint-in-vscode.html"/>
      <url>/configure-code-static-checking-tool-pylint-in-vscode.html</url>
      
        <content type="html"><![CDATA[<p><strong>刚开始使用VScode编写python代码时，总是会收到<code>Linter pylint is not installed</code>的提示，下边记录关于VScode配置代码静态检查工具和代码格式化工具。</strong></p><p><strong>关于如何配置点进去看这篇文章吧（<a href="https://blog.csdn.net/sunxb10/article/details/80984243">点我跳转</a>）</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
            <tag> pylint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的先序遍历、中序遍历和后序遍历</title>
      <link href="/preorder-traversal-middleorder-and-postorder-of-binary-tree.html"/>
      <url>/preorder-traversal-middleorder-and-postorder-of-binary-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>二叉树是一种非常重要的数据机构，对树节点的访问方式包括了深度优先遍历（DFS）和广度优先遍历（BFS）。其中深度优先遍历包括了先序遍历、中序遍历和后序遍历，广度优先遍历也就是层次遍历。下边只讲深度优先遍历的这三种。</p><h3 id="二、三种遍历方式的区别"><a href="#二、三种遍历方式的区别" class="headerlink" title="二、三种遍历方式的区别"></a>二、三种遍历方式的区别</h3><p><strong>先上张二叉搜索树（Binary Search Tree）图</strong></p><img src="https://pic.leetcode-cn.com/46d010607b947a903de5ce23fcbf9cbb905b36c3f2442d68459872203dee057f.png" width="50%" height="50%"><h4 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><ul><li><p><strong>遍历方式：根节点 -&gt; 左子树 -&gt; 右子树</strong></p></li><li><p><strong>遍历结果：5214367</strong></p></li></ul><h4 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 根节点 -&gt; 右子树</strong></li><li><strong>遍历结果：1234567</strong></li></ul><h4 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="3. 后序遍历"></a>3. 后序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 右子树 -&gt; 根节点</strong></li><li><strong>遍历结果：1342765</strong></li></ul><h3 id="三、Python实现"><a href="#三、Python实现" class="headerlink" title="三、Python实现"></a>三、Python实现</h3><p><strong>二叉树的实现代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    定义二叉树节点    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-先序遍历-1"><a href="#1-先序遍历-1" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><h5 id="（1）-递归实现"><a href="#（1）-递归实现" class="headerlink" title="（1） 递归实现"></a>（1） 递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""递归实现二叉树的"""</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type p: 二叉树根节点        """</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 节点为None</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>         result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先遍历左子树再遍历右子树</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）非递归实现"><a href="#（2）非递归实现" class="headerlink" title="（2）非递归实现"></a>（2）非递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""非递归实现先序遍历"""</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> p <span class="token operator">or</span> stack<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 节点非None</span>            <span class="token keyword">while</span> p<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left            p <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-中序遍历-1"><a href="#2-中序遍历-1" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><h5 id="（1）递归实现"><a href="#（1）递归实现" class="headerlink" title="（1）递归实现"></a>（1）递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">midorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span>            <span class="token keyword">return</span>         self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）非递归实现-1"><a href="#（2）非递归实现-1" class="headerlink" title="（2）非递归实现"></a>（2）非递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">unrecursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点的栈</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> p <span class="token operator">or</span> stack<span class="token punctuation">:</span>            <span class="token keyword">while</span> p<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>left            p <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、后序遍历"><a href="#3、后序遍历" class="headerlink" title="3、后序遍历"></a>3、后序遍历</h4><h5 id="（1）递归实现-1"><a href="#（1）递归实现-1" class="headerlink" title="（1）递归实现"></a>（1）递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> result<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recursion<span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">unrecursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        type root: 树根节点        非递归        """</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            n <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> n<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 保存的结果为根右左</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">level</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保存遍历结果</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 临时保存节点的队列</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            root <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                root<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 先序遍历 </tag>
            
            <tag> 中序遍历 </tag>
            
            <tag> 后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OneDrive备份电脑上的任意目录</title>
      <link href="/use-onedrive-to-back-up-any-directory-on-your-computer.html"/>
      <url>/use-onedrive-to-back-up-any-directory-on-your-computer.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>当我们使用Onedrive进行电脑文件备份的时候，会发现Onedrive默认在C盘，并且只有桌面、文档和图片三个目录。那么当我们想要对其他盘里的一些目录进行备份，该怎么做呢？接下来便以Windows平台为例记录一下。</p><h3 id="二、利用Onedrive备份电脑上的任意目录"><a href="#二、利用Onedrive备份电脑上的任意目录" class="headerlink" title="二、利用Onedrive备份电脑上的任意目录"></a>二、利用Onedrive备份电脑上的任意目录</h3><p><strong>话不多说，直接进入正文</strong></p><ol><li><p>首先打开Onedrive的目录，默认位于<code>C:\Users\用户名</code>目录下。</p></li><li><p>然后新开一个窗口，进入需要备份的目录。</p></li><li><p>以<code>管理员</code>的身份运行cmd。可以使用搜索功能搜索cmd，然后右键管理员运行。</p></li><li><p>在cmd中使用<code>mklink</code>命令在Onedrive中创建要备份目录的链接。</p><pre><code>mklink /d "C:\Users\18312\OneDrive - arvinhe\视频" “E:\视频”</code></pre><p><strong>说明：</strong></p><ul><li>第一对引号内，填入自己的Onedrive路径</li><li>第二对引号内，填入自己的要备份目录的路径</li><li>以上两个路径最好填入<code>绝对路径</code></li><li><code>\视频</code>表示要备份的目录名，前后引号内要保持一致</li></ul></li><li><p>最后回车执行命令。出现下边的提示，表示执行成功，如果Onedrive在电脑上已经启动的话，文件已经开始备份。</p><pre><code>为 C:\Users\18312\OneDrive - arvinhe\视频 &lt;&lt;===&gt;&gt; E:\视频 创建的符号链接</code></pre></li><li><p><strong>重要提示，如果源目录内的内容被删除，Onedrive链接文件将失效。可以在Onedrive中将备份文件移动到另外一个目录来解决这个问题。</strong></p></li><li><p><strong>如果路径中含有空格，那么路径一定要用英文引号括起来。否则会报命令语法不正确的错误</strong></p></li></ol><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>如果想要了解更多关于<code>mklink</code>命令的详情。<a href="https://blog.walterlv.com/post/ntfs-link-comparisons.html">戳我 戳我 戳我</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Onedrive </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office E5自动订阅</title>
      <link href="/office-e5-automatic-subscription.html"/>
      <url>/office-e5-automatic-subscription.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-摘要"><a href="#一、-摘要" class="headerlink" title="一、 摘要"></a>一、 摘要</h3><p>之前注册的office E5账号，试用期只有三个月，如果想要继续使用呢，那么就需要在账号到期前保持一定的开发活动，简言之就是经常调用微软这些软件的API。下边开始讲如何利用这种方法进行续订。</p><p><strong>重要的事情要多讲几遍：这种方法不保证一定可以续订成功，不保证一定可以续订成功，不保证一定可以续订成功</strong></p><h3 id="二、参考原文"><a href="#二、参考原文" class="headerlink" title="二、参考原文"></a>二、参考原文</h3><ol><li><a href="https://blog.432100.xyz/index.php/archives/50/">黑幕</a> ，这种方式需要用到服务器，成本较大，但是可以学习和借鉴。</li><li><a href="https://github.com/wangziyingwen/AutoApiSecret">https://github.com/wangziyingwen/AutoApiSecret</a>  这个里边的方法也是参考了上边黑幕大佬的内容，然后修改成了采用GitHub Action实现。这样一来，就不在需要服务器这一项了，也降低我这个穷**的生活负担<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8">😞</span></li><li>如果不想看文字步骤的，可以直接跳到最后，<a href="#video">观看视频</a>，本视频由第二个大佬制作。</li></ol><h3 id="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"><a href="#三、具体步骤（自己也记录一下，免得用得着的时候来回翻）" class="headerlink" title="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"></a>三、具体步骤（自己也记录一下，免得用得着的时候来回翻）</h3><p><strong>在往下操作之前，假设你已经有了office E5订阅。</strong></p><h4 id="1-首先前往注册Microsoft-Azure（前往注册）一个应用"><a href="#1-首先前往注册Microsoft-Azure（前往注册）一个应用" class="headerlink" title="1. 首先前往注册Microsoft Azure（前往注册）一个应用"></a>1. 首先前往注册Microsoft Azure（<a href="https://portal.azure.com/#home">前往注册</a>）一个应用</h4><p>这里简述下流程，首先使用E5管理员账号（我自己用的也是管理员，在其他地方又看到不是管理员账号的话可能会失败），登录来到主页以后，按步骤走。</p><ul><li><p>点击主页中的<code>管理Azure Active Directory</code>跳转</p></li><li><p>在左侧目录中找到<code>应用注册</code>，点击</p></li><li><p>点击上方的<code>新注册</code>，这时会跳出一个新建应用的界面。</p></li><li><p>在界面填写信息，名称可以随意写，建议写一个可以标识用途的名字。然后下边选择<code>任何组织目录（任何Azure AD目录-多租户）中的账户</code>。接下来重定向URI选择<code>Web</code>，后边填入<code>http://localhost:53682/</code>，注册。</p></li><li><p>注册以后会跳转到应用概述界面，将界面中的<strong>应用程序（客户端）ID</strong>找个地方复制保存一下，后边要用。然后点击左侧的<strong>API权限</strong>，依次点击<code>添加权限-&gt;Microsoft Graph-&gt;委托的权限</code>,然后将下边的权限勾选： </p><ul><li><code>Files.Read.All</code>、<code>Files.ReadWrite.All</code></li><li><code>Sites.Read.All</code>、<code>Sites.ReadWrite.All</code></li><li><code>User.Read.All</code>、<code> User.ReadWrite.All</code></li><li><code>Directory.Read.Al</code> 、<code>Directory.ReadWrite.All</code></li><li><code>Mail.Read</code> 、<code>Mail.ReadWrite</code></li><li><code>MailboxSettings.Read</code> 、<code>MailboxSettings.ReadWrite</code></li></ul><p>这些权限全部勾选好以后，点击底部的添加权限，这时候会返回到<strong>API权限</strong>界面，然后一定要点<code>代表XXX授予管理员同意</code>。</p></li><li><p>点击左侧目录中的<strong>证书和密码</strong>， 点击<strong>新客户端密码</strong>。说明随意填，年限随意选，然后点击添加。添加好了以后，客户端密码那一行会有一串值，这个值依然需要复制保存，这个是应用秘钥，后边要用。到这里注册就完成了。</p></li></ul><h4 id="2-获取refresh-token"><a href="#2-获取refresh-token" class="headerlink" title="2. 获取refresh token"></a>2. 获取<code>refresh token</code></h4><ul><li><p>下载<strong>rclone</strong>(<a href="https://downloads.rclone.org/v1.52.3/rclone-v1.52.3-windows-amd64.zip">点我下载</a>)，建议复制链接用迅雷下载会更快。下载好了以后解压，<strong>千万不要双击安装</strong>。</p></li><li><p>在解压以后的目录内，<code>shift+鼠标右键</code>， 打开power shell窗口，然后可以执行<code>start cmd</code>命令打开cmd，当然也可以一开始就使用cmd。</p></li><li><p>执行下边的代码：</p><ul><li><pre class="line-numbers language-powershell"><code class="language-powershell">rclone authorize <span class="token string">"onedrive"</span> <span class="token string">"之前保存的应用id"</span> <span class="token string">"之前保存的应用秘钥"</span><span class="token comment" spellcheck="true"># 将双引号内的内容用自己保存的ID和秘钥替换掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>执行以后，浏览器会弹出登录界面，登录自己的E5账号，然后浏览器显示Success，那就说明refresh token生成成功。</p></li><li><p>回到cmd或powershell界面，复制<code>refresh_token</code>的值（可以使用json格式化工具格式化一下，这样比较好找。），<strong>引号不要复制</strong>。</p></li></ul><h4 id="3-GitHub-Action设置"><a href="#3-GitHub-Action设置" class="headerlink" title="3. GitHub Action设置"></a>3. GitHub Action设置</h4><ul><li><p>首先<a href="https://github.com/wangziyingwen/AutoApiSecret">点我</a>，将项目代码fork到自己的GitHub中。接下来都要自己的账号下操作</p></li><li><p>编辑自己项目中的1.txt，删除其中的内容，然后将自己的refresh token粘贴进去。<strong>结尾千万不要留空格或者空行。</strong></p></li><li><p>点击本仓库的<strong>Settings -&gt; Secrets -&gt; new secret</strong>，新建两个secret：CONFIG_ID、CONFIG_KEY：</p><ul><li><p>CONFIG_ID</p><pre><code>id=r'你的应用id'</code></pre></li><li><p>CONFIG_KEY</p><pre><code>secret=r'你的应用秘钥'</code></pre></li></ul></li><li><p>点击右上角头像里边的设置，也就是个人设置，选择<strong>Developer settings -&gt;Personal access tokens -&gt; Generate new token</strong>，设置名字为<code>GITHUB_TOKEN</code>，然后勾选<code>repo</code>、<code>admin:repo_hook</code>、<code>workflow</code>，最后点击Generate token即可。</p></li><li><p>点击<strong>Actions</strong>，同意一下协议，等页面刷新以后，点击一下star，然后观察是否正在启动。如下图所示：</p><p><img src="http://qiniuimg.heyulong.top/GitHub_actions.png"></p></li><li><p>如果是正在转圈的黄色，那代表正在启动。如果是绿色对勾，那就表示已经启动。</p></li><li><p>启动起来以后，点击此action。进入此action页面，然后点击左侧目录中的<code>build</code>，然后在右侧将<code>Test Api</code>展开，便可以看到执行情况。</p></li><li><p>到了第二天，也可以来看一下执行记录。</p></li><li><p>结束</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><span id="video">最后</span></h3><p>这里是此开源Auto API作者录得一个视频，也可以看着视频来操作。</p><iframe src="//player.bilibili.com/player.html?aid=95688306&amp;bvid=BV1mE411V74B&amp;cid=163358877&amp;page=1&amp;high_quality=1&amp;danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400px," width="100%"> </iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
            <tag> E5 </tag>
            
            <tag> 续订 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Microsoft E5账号的1T Onedrive空间升级为5T</title>
      <link href="/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html"/>
      <url>/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、摘要："><a href="#一、摘要：" class="headerlink" title="一、摘要："></a>一、摘要：</h3><p>我们在注册了微软开发者账户以后，通常是会为我们的Onedrive分配5T的可用空间的。但是当我们打开Onedrive以后，看到的却只有1T。这时候，我们该怎么办呢，下边告诉你。</p><h3 id="二、将Onedrive-1T空间恢复到5T"><a href="#二、将Onedrive-1T空间恢复到5T" class="headerlink" title="二、将Onedrive 1T空间恢复到5T"></a>二、将Onedrive 1T空间恢复到5T</h3><h4 id="第一步：在管理后台修改"><a href="#第一步：在管理后台修改" class="headerlink" title="第一步：在管理后台修改"></a>第一步：在管理后台修改</h4><ol><li><p>登录我们的开发者账号（<a href="https://www.office.com/?auth=2">点我登录</a>），进入到如下图所示界面，然后依次点击管理-&gt;所有管理中心，然后在右边界面找到Onedrive，点击。</p><p><img src="http://qiniuimg.heyulong.top/office.png"></p><p><img src="http://qiniuimg.heyulong.top/administrator.png"></p></li><li><p>进入到下图所示界面，点击<code>storage</code> 或者存储，然后修改默认大小保存即可。</p><p><img src="http://qiniuimg.heyulong.top/storage.png"></p></li></ol><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><ol><li><p>下载<code>SharePoint Online Management Shell</code>（<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=35588">点我进入下载页面</a>）,根据自己的系统选择需要下载的版本。下载下来以后安装。安装好以后，在开始菜单最近安装里边会显示这个软件，然后打开。</p></li><li><p>接下来输入下面的代码：</p><pre class="line-numbers language-powershell"><code class="language-powershell">Connect<span class="token operator">-</span>SPOService <span class="token operator">-</span>Url https:<span class="token operator">/</span><span class="token operator">/</span>&lt;orgnam e><span class="token operator">-</span>admin<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：（1）代码中的<code>&lt;orgnam e&gt;</code>是注册账号的组织名字。</p><p>​                  （2）<code>&lt;orgnam e&gt;</code>可以从登录Onedrive以后的页面地址栏中获取。</p><p>​                                例如：我登录后的地址是<code>https://arvinhe-my.sharepoint.com/personal/arvin_arvin_onmicrosoft_com/_layouts/15/onedrive.aspx</code>，其中<code>-my.sharepoint</code>前面的<code>arvinhe</code>便是。</p></li><li><p>执行命令以后，会跳出一个登录界面，输入自己的账户密码登录即可。</p></li><li><p>登录了以后，继续执行下边的命令。</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>SPOSite <span class="token operator">-</span>Identity https:<span class="token operator">/</span><span class="token operator">/</span>arvinhe<span class="token operator">-</span>my<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span class="token operator">/</span>personal<span class="token operator">/</span>arvin_arvin_onmicrosoft_com <span class="token operator">-</span>StorageQuota 5242880<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：其中有两处地方需要改</p><p>（1）<code>-my.sharepoint</code></p><p>（2）<code>arvin_arvin_onmicrosoft_com</code>，其中的<code>@</code>和<code>.</code>都要用<code>_</code>替代的。</p><p>​        这两个地方与你已登录Onedrive（也就是要修改容量的Onedrive）的页面地址栏中的地址的前边大半部分是一样的，照着那个填就行了，参考第2小步给出的我的个人登录后的地址，把自己的填上就好了。</p></li><li><p>执行命令。退出Onedrive客户端，然后重新登陆，可以看到容量已经变了。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> E5 </tag>
            
            <tag> onedrive </tag>
            
            <tag> 扩容 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
