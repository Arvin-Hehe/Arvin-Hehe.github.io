<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vscode中配置代码静态检查工具pylint</title>
      <link href="/configure-code-static-checking-tool-pylint-in-vscode.html"/>
      <url>/configure-code-static-checking-tool-pylint-in-vscode.html</url>
      
        <content type="html"><![CDATA[<p><strong>刚开始使用VScode编写python代码时，总是会收到<code>Linter pylint is not installed</code>的提示，下边记录关于VScode配置代码静态检查工具和代码格式化工具。</strong></p><p><strong>关于如何配置点进去看这篇文章吧（<a href="https://blog.csdn.net/sunxb10/article/details/80984243">点我跳转</a>）</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
            <tag> pylint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的先序遍历、中序遍历和后序遍历</title>
      <link href="/preorder-traversal-middleorder-and-postorder-of-binary-tree.html"/>
      <url>/preorder-traversal-middleorder-and-postorder-of-binary-tree.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>二叉树是一种非常重要的数据机构，对树节点的访问方式包括了深度优先遍历（DFS）和广度优先遍历（BFS）。其中深度优先遍历包括了先序遍历、中序遍历和后序遍历，广度优先遍历也就是层次遍历。下边只讲深度优先遍历的这三种。</p><h3 id="二、三种遍历方式的区别"><a href="#二、三种遍历方式的区别" class="headerlink" title="二、三种遍历方式的区别"></a>二、三种遍历方式的区别</h3><p><strong>先上张二叉搜索树（Binary Search Tree）图</strong></p><img src="https://pic.leetcode-cn.com/46d010607b947a903de5ce23fcbf9cbb905b36c3f2442d68459872203dee057f.png" width="50%" height="50%"><h4 id="1-先序遍历"><a href="#1-先序遍历" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><ul><li><p><strong>遍历方式：根节点 -&gt; 左子树 -&gt; 右子树</strong></p></li><li><p><strong>遍历结果：5214367</strong></p></li></ul><h4 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 根节点 -&gt; 右子树</strong></li><li><strong>遍历结果：1234567</strong></li></ul><h4 id="3-后序遍历"><a href="#3-后序遍历" class="headerlink" title="3. 后序遍历"></a>3. 后序遍历</h4><ul><li><strong>遍历方式：左子树 -&gt; 右子树 -&gt; 根节点</strong></li><li><strong>遍历结果：1342765</strong></li></ul><h3 id="三、Python实现"><a href="#三、Python实现" class="headerlink" title="三、Python实现"></a>三、Python实现</h3><p><strong>二叉树的实现代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-先序遍历-1"><a href="#1-先序遍历-1" class="headerlink" title="1. 先序遍历"></a>1. 先序遍历</h4><h5 id="（1）-递归实现"><a href="#（1）-递归实现" class="headerlink" title="（1） 递归实现"></a>（1） 递归实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type p: TreeNode        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 先序遍历 </tag>
            
            <tag> 中序遍历 </tag>
            
            <tag> 后序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OneDrive备份电脑上的任意目录</title>
      <link href="/use-onedrive-to-back-up-any-directory-on-your-computer.html"/>
      <url>/use-onedrive-to-back-up-any-directory-on-your-computer.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>当我们使用Onedrive进行电脑文件备份的时候，会发现Onedrive默认在C盘，并且只有桌面、文档和图片三个目录。那么当我们想要对其他盘里的一些目录进行备份，该怎么做呢？接下来便以Windows平台为例记录一下。</p><h3 id="二、利用Onedrive备份电脑上的任意目录"><a href="#二、利用Onedrive备份电脑上的任意目录" class="headerlink" title="二、利用Onedrive备份电脑上的任意目录"></a>二、利用Onedrive备份电脑上的任意目录</h3><p><strong>话不多说，直接进入正文</strong></p><ol><li><p>首先打开Onedrive的目录，默认位于<code>C:\Users\用户名</code>目录下。</p></li><li><p>然后新开一个窗口，进入需要备份的目录。</p></li><li><p>以<code>管理员</code>的身份运行cmd。可以使用搜索功能搜索cmd，然后右键管理员运行。</p></li><li><p>在cmd中使用<code>mklink</code>命令在Onedrive中创建要备份目录的链接。</p><pre><code>mklink /d "C:\Users\18312\OneDrive - arvinhe\视频" “E:\视频”</code></pre><p><strong>说明：</strong></p><ul><li>第一对引号内，填入自己的Onedrive路径</li><li>第二对引号内，填入自己的要备份目录的路径</li><li>以上两个路径最好填入<code>绝对路径</code></li><li><code>\视频</code>表示要备份的目录名，前后引号内要保持一致</li></ul></li><li><p>最后回车执行命令。出现下边的提示，表示执行成功，如果Onedrive在电脑上已经启动的话，文件已经开始备份。</p><pre><code>为 C:\Users\18312\OneDrive - arvinhe\视频 &lt;&lt;===&gt;&gt; E:\视频 创建的符号链接</code></pre></li><li><p><strong>重要提示，如果源目录内的内容被删除，Onedrive链接文件将失效。可以在Onedrive中将备份文件移动到另外一个目录来解决这个问题。</strong></p></li><li><p><strong>如果路径中含有空格，那么路径一定要用英文引号括起来。否则会报命令语法不正确的错误</strong></p></li></ol><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>如果想要了解更多关于<code>mklink</code>命令的详情。<a href="https://blog.walterlv.com/post/ntfs-link-comparisons.html">戳我 戳我 戳我</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Onedrive </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office E5自动订阅</title>
      <link href="/office-e5-automatic-subscription.html"/>
      <url>/office-e5-automatic-subscription.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、-摘要"><a href="#一、-摘要" class="headerlink" title="一、 摘要"></a>一、 摘要</h3><p>之前注册的office E5账号，试用期只有三个月，如果想要继续使用呢，那么就需要在账号到期前保持一定的开发活动，简言之就是经常调用微软这些软件的API。下边开始讲如何利用这种方法进行续订。</p><p><strong>重要的事情要多讲几遍：这种方法不保证一定可以续订成功，不保证一定可以续订成功，不保证一定可以续订成功</strong></p><h3 id="二、参考原文"><a href="#二、参考原文" class="headerlink" title="二、参考原文"></a>二、参考原文</h3><ol><li><a href="https://blog.432100.xyz/index.php/archives/50/">黑幕</a> ，这种方式需要用到服务器，成本较大，但是可以学习和借鉴。</li><li><a href="https://github.com/wangziyingwen/AutoApiSecret">https://github.com/wangziyingwen/AutoApiSecret</a>  这个里边的方法也是参考了上边黑幕大佬的内容，然后修改成了采用GitHub Action实现。这样一来，就不在需要服务器这一项了，也降低我这个穷**的生活负担<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8">😞</span></li><li>如果不想看文字步骤的，可以直接跳到最后，<a href="#video">观看视频</a>，本视频由第二个大佬制作。</li></ol><h3 id="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"><a href="#三、具体步骤（自己也记录一下，免得用得着的时候来回翻）" class="headerlink" title="三、具体步骤（自己也记录一下，免得用得着的时候来回翻）"></a>三、具体步骤（自己也记录一下，免得用得着的时候来回翻）</h3><p><strong>在往下操作之前，假设你已经有了office E5订阅。</strong></p><h4 id="1-首先前往注册Microsoft-Azure（前往注册）一个应用"><a href="#1-首先前往注册Microsoft-Azure（前往注册）一个应用" class="headerlink" title="1. 首先前往注册Microsoft Azure（前往注册）一个应用"></a>1. 首先前往注册Microsoft Azure（<a href="https://portal.azure.com/#home">前往注册</a>）一个应用</h4><p>这里简述下流程，首先使用E5管理员账号（我自己用的也是管理员，在其他地方又看到不是管理员账号的话可能会失败），登录来到主页以后，按步骤走。</p><ul><li><p>点击主页中的<code>管理Azure Active Directory</code>跳转</p></li><li><p>在左侧目录中找到<code>应用注册</code>，点击</p></li><li><p>点击上方的<code>新注册</code>，这时会跳出一个新建应用的界面。</p></li><li><p>在界面填写信息，名称可以随意写，建议写一个可以标识用途的名字。然后下边选择<code>任何组织目录（任何Azure AD目录-多租户）中的账户</code>。接下来重定向URI选择<code>Web</code>，后边填入<code>http://localhost:53682/</code>，注册。</p></li><li><p>注册以后会跳转到应用概述界面，将界面中的<strong>应用程序（客户端）ID</strong>找个地方复制保存一下，后边要用。然后点击左侧的<strong>API权限</strong>，依次点击<code>添加权限-&gt;Microsoft Graph-&gt;委托的权限</code>,然后将下边的权限勾选： </p><ul><li><code>Files.Read.All</code>、<code>Files.ReadWrite.All</code></li><li><code>Sites.Read.All</code>、<code>Sites.ReadWrite.All</code></li><li><code>User.Read.All</code>、<code> User.ReadWrite.All</code></li><li><code>Directory.Read.Al</code> 、<code>Directory.ReadWrite.All</code></li><li><code>Mail.Read</code> 、<code>Mail.ReadWrite</code></li><li><code>MailboxSettings.Read</code> 、<code>MailboxSettings.ReadWrite</code></li></ul><p>这些权限全部勾选好以后，点击底部的添加权限，这时候会返回到<strong>API权限</strong>界面，然后一定要点<code>代表XXX授予管理员同意</code>。</p></li><li><p>点击左侧目录中的<strong>证书和密码</strong>， 点击<strong>新客户端密码</strong>。说明随意填，年限随意选，然后点击添加。添加好了以后，客户端密码那一行会有一串值，这个值依然需要复制保存，这个是应用秘钥，后边要用。到这里注册就完成了。</p></li></ul><h4 id="2-获取refresh-token"><a href="#2-获取refresh-token" class="headerlink" title="2. 获取refresh token"></a>2. 获取<code>refresh token</code></h4><ul><li><p>下载<strong>rclone</strong>(<a href="https://downloads.rclone.org/v1.52.3/rclone-v1.52.3-windows-amd64.zip">点我下载</a>)，建议复制链接用迅雷下载会更快。下载好了以后解压，<strong>千万不要双击安装</strong>。</p></li><li><p>在解压以后的目录内，<code>shift+鼠标右键</code>， 打开power shell窗口，然后可以执行<code>start cmd</code>命令打开cmd，当然也可以一开始就使用cmd。</p></li><li><p>执行下边的代码：</p><ul><li><pre class="line-numbers language-powershell"><code class="language-powershell">rclone authorize <span class="token string">"onedrive"</span> <span class="token string">"之前保存的应用id"</span> <span class="token string">"之前保存的应用秘钥"</span><span class="token comment" spellcheck="true"># 将双引号内的内容用自己保存的ID和秘钥替换掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>执行以后，浏览器会弹出登录界面，登录自己的E5账号，然后浏览器显示Success，那就说明refresh token生成成功。</p></li><li><p>回到cmd或powershell界面，复制<code>refresh_token</code>的值（可以使用json格式化工具格式化一下，这样比较好找。），<strong>引号不要复制</strong>。</p></li></ul><h4 id="3-GitHub-Action设置"><a href="#3-GitHub-Action设置" class="headerlink" title="3. GitHub Action设置"></a>3. GitHub Action设置</h4><ul><li><p>首先<a href="https://github.com/wangziyingwen/AutoApiSecret">点我</a>，将项目代码fork到自己的GitHub中。接下来都要自己的账号下操作</p></li><li><p>编辑自己项目中的1.txt，删除其中的内容，然后将自己的refresh token粘贴进去。<strong>结尾千万不要留空格或者空行。</strong></p></li><li><p>点击本仓库的<strong>Settings -&gt; Secrets -&gt; new secret</strong>，新建两个secret：CONFIG_ID、CONFIG_KEY：</p><ul><li><p>CONFIG_ID</p><pre><code>id=r'你的应用id'</code></pre></li><li><p>CONFIG_KEY</p><pre><code>secret=r'你的应用秘钥'</code></pre></li></ul></li><li><p>点击右上角头像里边的设置，也就是个人设置，选择<strong>Developer settings -&gt;Personal access tokens -&gt; Generate new token</strong>，设置名字为<code>GITHUB_TOKEN</code>，然后勾选<code>repo</code>、<code>admin:repo_hook</code>、<code>workflow</code>，最后点击Generate token即可。</p></li><li><p>点击<strong>Actions</strong>，同意一下协议，等页面刷新以后，点击一下star，然后观察是否正在启动。如下图所示：</p><p><img src="http://qfi3qioyd.hn-bkt.clouddn.com/GitHub_actions.png"></p></li><li><p>如果是正在转圈的黄色，那代表正在启动。如果是绿色对勾，那就表示已经启动。</p></li><li><p>启动起来以后，点击此action。进入此action页面，然后点击左侧目录中的<code>build</code>，然后在右侧将<code>Test Api</code>展开，便可以看到执行情况。</p></li><li><p>到了第二天，也可以来看一下执行记录。</p></li><li><p>结束</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><span id="video">最后</span></h3><p>这里是此开源Auto API作者录得一个视频，也可以看着视频来操作。</p><iframe src="//player.bilibili.com/player.html?aid=95688306&amp;bvid=BV1mE411V74B&amp;cid=163358877&amp;page=1&amp;high_quality=1&amp;danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400px," width="100%"> </iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> office E5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
            <tag> E5 </tag>
            
            <tag> 续订 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Microsoft E5账号的1T Onedrive空间升级为5T</title>
      <link href="/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html"/>
      <url>/upgrade-1t-onedrive-space-of-microsoft-e5-account-to-5t.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、摘要："><a href="#一、摘要：" class="headerlink" title="一、摘要："></a>一、摘要：</h3><p>我们在注册了微软开发者账户以后，通常是会为我们的Onedrive分配5T的可用空间的。但是当我们打开Onedrive以后，看到的却只有1T。这时候，我们该怎么办呢，下边告诉你。</p><h3 id="二、将Onedrive-1T空间恢复到5T"><a href="#二、将Onedrive-1T空间恢复到5T" class="headerlink" title="二、将Onedrive 1T空间恢复到5T"></a>二、将Onedrive 1T空间恢复到5T</h3><h4 id="第一步：在管理后台修改"><a href="#第一步：在管理后台修改" class="headerlink" title="第一步：在管理后台修改"></a>第一步：在管理后台修改</h4><ol><li><p>登录我们的开发者账号（<a href="https://www.office.com/?auth=2">点我登录</a>），进入到如下图所示界面，然后依次点击管理-&gt;所有管理中心，然后在右边界面找到Onedrive，点击。</p><p><img src="http://qfi3qioyd.hn-bkt.clouddn.com/office.png"></p><p><img src="http://qfi3qioyd.hn-bkt.clouddn.com/administrator.png"></p></li><li><p>进入到下图所示界面，点击<code>storage</code> 或者存储，然后修改默认大小保存即可。</p><p><img src="http://qfi3qioyd.hn-bkt.clouddn.com/storage.png"></p></li></ol><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><ol><li><p>下载<code>SharePoint Online Management Shell</code>（<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=35588">点我进入下载页面</a>）,根据自己的系统选择需要下载的版本。下载下来以后安装。安装好以后，在开始菜单最近安装里边会显示这个软件，然后打开。</p></li><li><p>接下来输入下面的代码：</p><pre class="line-numbers language-powershell"><code class="language-powershell">Connect<span class="token operator">-</span>SPOService <span class="token operator">-</span>Url https:<span class="token operator">/</span><span class="token operator">/</span>&lt;orgnam e><span class="token operator">-</span>admin<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：（1）代码中的<code>&lt;orgnam e&gt;</code>是注册账号的组织名字。</p><p>​                  （2）<code>&lt;orgnam e&gt;</code>可以从登录Onedrive以后的页面地址栏中获取。</p><p>​                                例如：我登录后的地址是<code>https://arvinhe-my.sharepoint.com/personal/arvin_arvin_onmicrosoft_com/_layouts/15/onedrive.aspx</code>，其中<code>-my.sharepoint</code>前面的<code>arvinhe</code>便是。</p></li><li><p>执行命令以后，会跳出一个登录界面，输入自己的账户密码登录即可。</p></li><li><p>登录了以后，继续执行下边的命令。</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>SPOSite <span class="token operator">-</span>Identity https:<span class="token operator">/</span><span class="token operator">/</span>arvinhe<span class="token operator">-</span>my<span class="token punctuation">.</span>sharepoint<span class="token punctuation">.</span>com<span class="token operator">/</span>personal<span class="token operator">/</span>arvin_arvin_onmicrosoft_com <span class="token operator">-</span>StorageQuota 5242880<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==注意==：其中有两处地方需要改</p><p>（1）<code>-my.sharepoint</code></p><p>（2）<code>arvin_arvin_onmicrosoft_com</code>，其中的<code>@</code>和<code>.</code>都要用<code>_</code>替代的。</p><p>​        这两个地方与你已登录Onedrive（也就是要修改容量的Onedrive）的页面地址栏中的地址的前边大半部分是一样的，照着那个填就行了，参考第2小步给出的我的个人登录后的地址，把自己的填上就好了。</p></li><li><p>执行命令。退出Onedrive客户端，然后重新登陆，可以看到容量已经变了。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Onedrive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> E5 </tag>
            
            <tag> Onedrive </tag>
            
            <tag> 扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次提交测试</title>
      <link href="/submit-the-test-for-first-time.html"/>
      <url>/submit-the-test-for-first-time.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一次提交测试"><a href="#第一次提交测试" class="headerlink" title="第一次提交测试"></a>第一次提交测试</h2><p>博客创建好了，总是要测一下管不管用的。</p><h3 id="试试小标题"><a href="#试试小标题" class="headerlink" title="试试小标题"></a>试试小标题</h3><blockquote><p>测试</p></blockquote><ul><li>测试<ol><li>测试</li><li>测试</li></ol></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个测试'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一大段文字试试圣诞节的会计师房价快速的房价快速的健康恢复的健康和手机号链接哈金凤凰俩hi卢浮宫胡 返回的啊胡打算复读灰色空间发哈地方拉黑 路烦得很</p><h3 id="内嵌视频试试"><a href="#内嵌视频试试" class="headerlink" title="内嵌视频试试"></a>内嵌视频试试</h3><h4 id="1-哔哩哔哩测试"><a href="#1-哔哩哔哩测试" class="headerlink" title="1. 哔哩哔哩测试"></a>1. 哔哩哔哩测试</h4><iframe src="//player.bilibili.com/player.html?aid=796819302&amp;bvid=BV18C4y1t7dR&amp;cid=227090990&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="400px"> </iframe>#### 2. YouTube测试<iframe width="560" height="400" src="https://www.youtube.com/embed/jaoqxAjpSUE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
